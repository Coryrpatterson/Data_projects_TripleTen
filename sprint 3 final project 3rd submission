{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hello!\n",
    "I'm happy to review your project today.\n",
    "When I will see mistake at the first time, I will just point it out. I let you find it and fix it by\n",
    "yourself. I'm trying to prepare you to work as an Data Analyst. SO, at a real job, your team lead\n",
    "will do the same. But if you can't handle this task yet, I will give you a more accurate hint at the\n",
    "next iteration.\n",
    "You will find my comments below - please do not move, modify or delete them.\n",
    "You can find my comments in green, yellow or red boxes like this:\n",
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "Success. Everything is done succesfully. </div>\n",
    "<div class=\"alert alert-block alert-warning\"> <b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "Remarks. Some recommendations. </div>\n",
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "Needs fixing. The block requires some corrections. Work can't be accepted with the red\n",
    "comments. </div>\n",
    "You can answer me by using this: not sue what i can do about putting all the imports in the first cell\n",
    "<div class=\"alert alert-block alert-info\"> <b>Student answer.</b> <a class=\"tocSkip\"></a>\n",
    "</div>\n",
    "\n",
    "\n",
    "\n",
    "**Keep in mind that the project will be accepted only when all the “red” issues are resolved.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>General Feedback</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "\n",
    "\n",
    "Hi,  Cory\n",
    "   \n",
    "\n",
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b></b> <a class=\"tocSkip\"></a>\n",
    "You need to carry out analysis and complete the project for dataframes that you uploaded in the begining of the project Please dont create sample dataframes\n",
    "</div>\n",
    "    \n",
    "Waiting for a new version"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>General Feedback v2</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "\n",
    "\n",
    "Hi,  Cory\n",
    "   \n",
    "\n",
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b></b> <a class=\"tocSkip\"></a>\n",
    "We have an issue with code Please fix it To be sure that all code runs use tab Kernel - Restart & Run All\n",
    "</div>\n",
    "    \n",
    "Waiting for a new version"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>General Feedback v3</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "\n",
    "\n",
    "Hi,  Cory\n",
    "   \n",
    "\n",
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b></b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "I have provided you with a more detailed comment on how to fix the issue. I believe you’ll find it much easier to resolve now. Additionally, I want to draw your attention to the primary issue that needs to be addressed in your project—the creation of new dataframes. Please refrain from creating new dataframes. At the very beginning of the project, you loaded all the necessary information, and our analysis should be based on these files. You are creating dataframes with just five rows, which is incorrect. Please remove all the code where you create megaline_users_df, megaline_calls_df, megaline_messages_df, and megaline_internet_df and use dataframes that you created in cell 2\n",
    "</div>\n",
    "    \n",
    "Waiting for a new version"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\"> <b>Student answer.</b> <a class=\"tocSkip\"></a>\n",
    "</div>\n",
    "Im not sure if you were able to see my last note of being unsure about the one line feedbacks, on the last two reviews I did really well with understanding what the reviewers were looking at and wanting me to change by going into more detail. I understand that there is issues with the code, however, if I could get a little more feedback to understand what you are looking for and what I should have done that would be grately appreciated"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>General Feedback v4</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "\n",
    "\n",
    "Hi, Cory\n",
    "    \n",
    "Thank you for your corrections Now your project is almost perfect\n",
    "    \n",
    "    \n",
    "There are many things that I like:\n",
    " \n",
    "- you are great in feature engineering\n",
    "- super visualizations\n",
    "- right code for hypotheses testing\n",
    "- nice primary data preprocessing \n",
    "- amazing function for revenue calculation\n",
    "\n",
    "\n",
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b></b> <a class=\"tocSkip\"></a>\n",
    "There are just few issues -  fix the calculation of revenue from Internet, add some calculations and conclusions for user profile\n",
    "    \n",
    "</div>\n",
    "    \n",
    "One more time and you will have it"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Which one is a better plan?\n",
    "\n",
    "You work as an analyst for the telecom operator Megaline. The company offers its clients two prepaid plans, Surf and Ultimate. The commercial department wants to know which of the plans brings in more revenue in order to adjust the advertising budget.\n",
    "\n",
    "You are going to carry out a preliminary analysis of the plans based on a relatively small client selection. You'll have the data on 500 Megaline clients: who the clients are, where they're from, which plan they use, and the number of calls they made and text messages they sent in 2018. Your job is to analyze the clients' behavior and determine which prepaid plan brings in more revenue."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[We've provided you with some commentary to guide your thinking as you complete this project. However, make sure to remove all the bracketed comments before submitting your project.]\n",
    "\n",
    "[Before you dive into analyzing your data, explain for yourself the purpose of the project and actions you plan to take.]\n",
    "\n",
    "[Please bear in mind that studying, amending, and analyzing data is an iterative process. It is normal to return to previous steps and correct/expand them to allow for further steps.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The purpose of this project is to see where we can best utilies our advertising budget and see where our dollars will be best spent wether that be the \"Surf Plan\" or the \"Ultimate Plan\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading all the libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy.stats import ttest_ind"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Megaline Calls Data:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id   call_date  duration\n",
       "0   1000_93     1000  2018-12-27      8.52\n",
       "1  1000_145     1000  2018-12-27     13.66\n",
       "2  1000_247     1000  2018-12-27     14.48\n",
       "3  1000_309     1000  2018-12-28      5.76\n",
       "4  1000_380     1000  2018-12-30      4.22"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Megaline Internet Data:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_13</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_204</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_379</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>660.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_413</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>270.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_442</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>880.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id session_date  mb_used\n",
       "0   1000_13     1000   2018-12-29    89.86\n",
       "1  1000_204     1000   2018-12-31     0.00\n",
       "2  1000_379     1000   2018-12-28   660.40\n",
       "3  1000_413     1000   2018-12-26   270.99\n",
       "4  1000_442     1000   2018-12-27   880.22"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Megaline Messages Data:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_125</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_160</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_223</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_251</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_255</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id message_date\n",
       "0  1000_125     1000   2018-12-27\n",
       "1  1000_160     1000   2018-12-31\n",
       "2  1000_223     1000   2018-12-31\n",
       "3  1000_251     1000   2018-12-27\n",
       "4  1000_255     1000   2018-12-26"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Megaline Plans Data:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \n",
       "0               20          10             0.03            0.03      surf  \n",
       "1               70           7             0.01            0.01  ultimate  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Megaline Users Data:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV MSA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK MSA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id first_name  last_name  age                                   city  \\\n",
       "0     1000   Anamaria      Bauer   45  Atlanta-Sandy Springs-Roswell, GA MSA   \n",
       "1     1001     Mickey  Wilkerson   28        Seattle-Tacoma-Bellevue, WA MSA   \n",
       "2     1002     Carlee    Hoffman   36   Las Vegas-Henderson-Paradise, NV MSA   \n",
       "3     1003   Reynaldo    Jenkins   52                          Tulsa, OK MSA   \n",
       "4     1004    Leonila   Thompson   40        Seattle-Tacoma-Bellevue, WA MSA   \n",
       "\n",
       "     reg_date      plan churn_date  \n",
       "0  2018-12-24  ultimate        NaN  \n",
       "1  2018-08-13      surf        NaN  \n",
       "2  2018-10-21      surf        NaN  \n",
       "3  2018-01-28      surf        NaN  \n",
       "4  2018-05-23      surf        NaN  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load the data files into different DataFrames\n",
    "megaline_calls = pd.read_csv('/datasets/megaline_calls.csv')\n",
    "megaline_internet = pd.read_csv('/datasets/megaline_internet.csv')\n",
    "megaline_messages = pd.read_csv('/datasets/megaline_messages.csv')\n",
    "megaline_plans = pd.read_csv('/datasets/megaline_plans.csv')\n",
    "megaline_users = pd.read_csv('/datasets/megaline_users.csv')\n",
    "\n",
    "print(\"Megaline Calls Data:\")\n",
    "display(megaline_calls.head())\n",
    "\n",
    "print(\"\\nMegaline Internet Data:\")\n",
    "display(megaline_internet.head())\n",
    "\n",
    "print(\"\\nMegaline Messages Data:\")\n",
    "display(megaline_messages.head())\n",
    "\n",
    "print(\"\\nMegaline Plans Data:\")\n",
    "display(megaline_plans.head())\n",
    "\n",
    "print(\"\\nMegaline Users Data:\")\n",
    "display(megaline_users.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "Great We have all necessary data </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2 entries, 0 to 1\n",
      "Data columns (total 8 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   messages_included      2 non-null      int64  \n",
      " 1   mb_per_month_included  2 non-null      int64  \n",
      " 2   minutes_included       2 non-null      int64  \n",
      " 3   usd_monthly_pay        2 non-null      int64  \n",
      " 4   usd_per_gb             2 non-null      int64  \n",
      " 5   usd_per_message        2 non-null      float64\n",
      " 6   usd_per_minute         2 non-null      float64\n",
      " 7   plan_name              2 non-null      object \n",
      "dtypes: float64(2), int64(5), object(1)\n",
      "memory usage: 256.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the plans' DataFrame\n",
    "megaline_plans_df = pd.DataFrame(megaline_plans)\n",
    "megaline_plans_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "1               1000                  30720              3000   \n",
       "0                 50                  15360               500   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \n",
       "1               70           7             0.01            0.01  ultimate  \n",
       "0               20          10             0.03            0.03      surf  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print a sample of data for plans\n",
    "sample_data = megaline_plans_df.sample(n=2)  \n",
    "display(sample_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-warning\"> <b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "~~Why we need to re-create the same table? We have megaline_plans~~ </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "According to the sample of the data above, it appears that in the Ultimate Plan, on average customers are paying 70 dollars a month where the Surf Plan are only paying 20 dollars a month and getting half of the MegaBytes per month. Just as an initial observation, the ultimate plan is the more likely choice for advertising Dollars due to one customer with the Ultimate Plan brings in more money than three Surf Plan customers. Let's dig into things a little farther to see if this initial observation is true."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "Right conclusion </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fix data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "messages_included        0\n",
       "mb_per_month_included    0\n",
       "minutes_included         0\n",
       "usd_monthly_pay          0\n",
       "usd_per_gb               0\n",
       "usd_per_message          0\n",
       "usd_per_minute           0\n",
       "plan_name                0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Duplicate rows:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'\\nCheck for negative or illogical values:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [messages_included, mb_per_month_included, minutes_included, usd_monthly_pay, usd_per_gb, usd_per_message, usd_per_minute, plan_name]\n",
       "Index: []"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [messages_included, mb_per_month_included, minutes_included, usd_monthly_pay, usd_per_gb, usd_per_message, usd_per_minute, plan_name]\n",
       "Index: []"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [messages_included, mb_per_month_included, minutes_included, usd_monthly_pay, usd_per_gb, usd_per_message, usd_per_minute, plan_name]\n",
       "Index: []"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [messages_included, mb_per_month_included, minutes_included, usd_monthly_pay, usd_per_gb, usd_per_message, usd_per_minute, plan_name]\n",
       "Index: []"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Data Types:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "messages_included          int64\n",
       "mb_per_month_included      int64\n",
       "minutes_included           int64\n",
       "usd_monthly_pay            int64\n",
       "usd_per_gb                 int64\n",
       "usd_per_message          float64\n",
       "usd_per_minute           float64\n",
       "plan_name                 object\n",
       "dtype: object"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Cleaned DataFrame:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \n",
       "0               20          10             0.03            0.03      surf  \n",
       "1               70           7             0.01            0.01  ultimate  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Missing values:\")\n",
    "display(megaline_plans_df.isnull().sum())\n",
    "\n",
    "print(\"\\nDuplicate rows:\")\n",
    "display(megaline_plans_df.duplicated().sum())\n",
    "\n",
    "display(\"\\nCheck for negative or illogical values:\")\n",
    "display(megaline_plans_df[megaline_plans_df['usd_monthly_pay'] < 0])\n",
    "display(megaline_plans_df[megaline_plans_df['messages_included'] < 0])\n",
    "display(megaline_plans_df[megaline_plans_df['mb_per_month_included'] < 0])\n",
    "display(megaline_plans_df[megaline_plans_df['minutes_included'] < 0])\n",
    "\n",
    "print(\"\\nData Types:\")\n",
    "display(megaline_plans_df.dtypes)\n",
    "\n",
    "megaline_plans_df['plan_name'] = megaline_plans_df['plan_name'].str.strip().str.lower()  \n",
    "\n",
    "print(\"\\nCleaned DataFrame:\")\n",
    "display(megaline_plans_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-warning\"> <b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "We have just 2 rows By displaying them we can see if there are not correct values</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Enrich data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>usd_annual_pay</th>\n",
       "      <th>gb_per_month</th>\n",
       "      <th>avg_cost_per_minute</th>\n",
       "      <th>avg_cost_per_gb</th>\n",
       "      <th>avg_cost_per_message</th>\n",
       "      <th>plan_popularity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>840</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.023333</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.07</td>\n",
       "      <td>500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \\\n",
       "0               20          10             0.03            0.03      surf   \n",
       "1               70           7             0.01            0.01  ultimate   \n",
       "\n",
       "   usd_annual_pay  gb_per_month  avg_cost_per_minute  avg_cost_per_gb  \\\n",
       "0             240          15.0             0.040000         1.333333   \n",
       "1             840          30.0             0.023333         2.333333   \n",
       "\n",
       "   avg_cost_per_message  plan_popularity  \n",
       "0                  0.40              150  \n",
       "1                  0.07              500  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "megaline_plans_df['usd_annual_pay'] = megaline_plans_df['usd_monthly_pay'] * 12\n",
    "\n",
    "megaline_plans_df['gb_per_month'] = megaline_plans_df['mb_per_month_included'] / 1024\n",
    "\n",
    "megaline_plans_df['avg_cost_per_minute'] = megaline_plans_df['usd_monthly_pay'] / megaline_plans_df['minutes_included']\n",
    "megaline_plans_df['avg_cost_per_gb'] = megaline_plans_df['usd_monthly_pay'] / megaline_plans_df['gb_per_month']\n",
    "megaline_plans_df['avg_cost_per_message'] = megaline_plans_df['usd_monthly_pay'] / megaline_plans_df['messages_included']\n",
    "\n",
    "megaline_plans_df['plan_popularity'] = [150, 500]\n",
    "\n",
    "display(megaline_plans_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment v3</b> <a class=\"tocSkip\"></a>\n",
    "\n",
    "~~You renamed column and now we have column 'gb_per_month' instead of 'total_data_gb' It is great but we need to use new name in further lines of code Here we have an error because of this~~\n",
    "    \n",
    "    \n",
    "    megaline_plans_df['avg_cost_per_gb'] = megaline_plans_df['usd_monthly_pay'] / megaline_plans_df['total_data_gb']\n",
    "    \n",
    "~~pandas doesnt find column 'total_data_gb' So you need to write~~\n",
    "    \n",
    "    megaline_plans_df['avg_cost_per_gb'] = megaline_plans_df['usd_monthly_pay'] / megaline_plans_df['gb_per_month']\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment v2</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "~~We have an issue with code Please fix it~~ </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-warning\"> <b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "~~It better to name column 'gb_per_month_included' instead of  'total_data_gb'~~</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment v4</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "Super feature engineering - it is great that you created additional columns based on original data It can help us to carry out deeper analysis and gives more information about difference in plans </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   user_id     500 non-null    int64 \n",
      " 1   first_name  500 non-null    object\n",
      " 2   last_name   500 non-null    object\n",
      " 3   age         500 non-null    int64 \n",
      " 4   city        500 non-null    object\n",
      " 5   reg_date    500 non-null    object\n",
      " 6   plan        500 non-null    object\n",
      " 7   churn_date  34 non-null     object\n",
      "dtypes: int64(2), object(6)\n",
      "memory usage: 31.4+ KB\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the users' DataFrame\n",
    "megaline_users.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-warning\"> <b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "Here and further\n",
    "    \n",
    "In the begining of your project you uploaded file and got dataframe megaline_users There is no need to use pd.DataFrame(megaline_users) because megaline_users is already dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>326</th>\n",
       "      <td>1326</td>\n",
       "      <td>Johnathon</td>\n",
       "      <td>Branch</td>\n",
       "      <td>21</td>\n",
       "      <td>Greensboro-High Point, NC MSA</td>\n",
       "      <td>2018-02-06</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>1127</td>\n",
       "      <td>Marchelle</td>\n",
       "      <td>Brock</td>\n",
       "      <td>28</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-06-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>1107</td>\n",
       "      <td>Lane</td>\n",
       "      <td>Cash</td>\n",
       "      <td>61</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-11-15</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>1261</td>\n",
       "      <td>Dusti</td>\n",
       "      <td>Forbes</td>\n",
       "      <td>31</td>\n",
       "      <td>Kansas City, MO-KS MSA</td>\n",
       "      <td>2018-02-22</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>1193</td>\n",
       "      <td>Lacresha</td>\n",
       "      <td>Olsen</td>\n",
       "      <td>18</td>\n",
       "      <td>Houston-The Woodlands-Sugar Land, TX MSA</td>\n",
       "      <td>2018-07-07</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id first_name last_name  age  \\\n",
       "326     1326  Johnathon    Branch   21   \n",
       "127     1127  Marchelle     Brock   28   \n",
       "107     1107       Lane      Cash   61   \n",
       "261     1261      Dusti    Forbes   31   \n",
       "193     1193   Lacresha     Olsen   18   \n",
       "\n",
       "                                          city    reg_date      plan  \\\n",
       "326              Greensboro-High Point, NC MSA  2018-02-06      surf   \n",
       "127  New York-Newark-Jersey City, NY-NJ-PA MSA  2018-06-23      surf   \n",
       "107  New York-Newark-Jersey City, NY-NJ-PA MSA  2018-11-15  ultimate   \n",
       "261                     Kansas City, MO-KS MSA  2018-02-22      surf   \n",
       "193   Houston-The Woodlands-Sugar Land, TX MSA  2018-07-07      surf   \n",
       "\n",
       "    churn_date  \n",
       "326        NaN  \n",
       "127        NaN  \n",
       "107        NaN  \n",
       "261        NaN  \n",
       "193        NaN  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print a sample of data for users\n",
    "sample_data = megaline_users.sample(n=5)  \n",
    "display(sample_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It appears from this small sample of the data that the Surf Plan is more popular among customers. 80% of the sample are on this plan from the \"User\" data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "\n",
    "~~We have megaline_users Why we can not just display first 5 rows from dataframe that you uploaded in the begining of the project?~~ </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fix Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values before:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "user_id         0\n",
       "first_name      0\n",
       "last_name       0\n",
       "age             0\n",
       "city            0\n",
       "reg_date        0\n",
       "plan            0\n",
       "churn_date    466\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Missing values after cleaning:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "user_id       0\n",
       "first_name    0\n",
       "last_name     0\n",
       "age           0\n",
       "city          0\n",
       "reg_date      0\n",
       "plan          0\n",
       "churn_date    0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Cleaned DataFrame:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>No churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>No churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV MSA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>No churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK MSA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>No churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>No churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>1495</td>\n",
       "      <td>Fidel</td>\n",
       "      <td>Sharpe</td>\n",
       "      <td>67</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-09-04</td>\n",
       "      <td>surf</td>\n",
       "      <td>No churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>1496</td>\n",
       "      <td>Ariel</td>\n",
       "      <td>Shepherd</td>\n",
       "      <td>49</td>\n",
       "      <td>New Orleans-Metairie, LA MSA</td>\n",
       "      <td>2018-02-20</td>\n",
       "      <td>surf</td>\n",
       "      <td>No churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>1497</td>\n",
       "      <td>Donte</td>\n",
       "      <td>Barrera</td>\n",
       "      <td>49</td>\n",
       "      <td>Los Angeles-Long Beach-Anaheim, CA MSA</td>\n",
       "      <td>2018-12-10</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>No churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>1498</td>\n",
       "      <td>Scot</td>\n",
       "      <td>Williamson</td>\n",
       "      <td>51</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-02-04</td>\n",
       "      <td>surf</td>\n",
       "      <td>No churn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>1499</td>\n",
       "      <td>Shena</td>\n",
       "      <td>Dickson</td>\n",
       "      <td>37</td>\n",
       "      <td>Orlando-Kissimmee-Sanford, FL MSA</td>\n",
       "      <td>2018-05-06</td>\n",
       "      <td>surf</td>\n",
       "      <td>No churn</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id first_name   last_name  age  \\\n",
       "0       1000   Anamaria       Bauer   45   \n",
       "1       1001     Mickey   Wilkerson   28   \n",
       "2       1002     Carlee     Hoffman   36   \n",
       "3       1003   Reynaldo     Jenkins   52   \n",
       "4       1004    Leonila    Thompson   40   \n",
       "..       ...        ...         ...  ...   \n",
       "495     1495      Fidel      Sharpe   67   \n",
       "496     1496      Ariel    Shepherd   49   \n",
       "497     1497      Donte     Barrera   49   \n",
       "498     1498       Scot  Williamson   51   \n",
       "499     1499      Shena     Dickson   37   \n",
       "\n",
       "                                          city   reg_date      plan churn_date  \n",
       "0        Atlanta-Sandy Springs-Roswell, GA MSA 2018-12-24  ultimate   No churn  \n",
       "1              Seattle-Tacoma-Bellevue, WA MSA 2018-08-13      surf   No churn  \n",
       "2         Las Vegas-Henderson-Paradise, NV MSA 2018-10-21      surf   No churn  \n",
       "3                                Tulsa, OK MSA 2018-01-28      surf   No churn  \n",
       "4              Seattle-Tacoma-Bellevue, WA MSA 2018-05-23      surf   No churn  \n",
       "..                                         ...        ...       ...        ...  \n",
       "495  New York-Newark-Jersey City, NY-NJ-PA MSA 2018-09-04      surf   No churn  \n",
       "496               New Orleans-Metairie, LA MSA 2018-02-20      surf   No churn  \n",
       "497     Los Angeles-Long Beach-Anaheim, CA MSA 2018-12-10  ultimate   No churn  \n",
       "498  New York-Newark-Jersey City, NY-NJ-PA MSA 2018-02-04      surf   No churn  \n",
       "499          Orlando-Kissimmee-Sanford, FL MSA 2018-05-06      surf   No churn  \n",
       "\n",
       "[500 rows x 8 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Missing values before:\")\n",
    "display(megaline_users.isnull().sum())\n",
    "\n",
    "megaline_users['churn_date'].fillna('No churn', inplace=True)\n",
    "\n",
    "megaline_users['reg_date'] = pd.to_datetime(megaline_users['reg_date'])\n",
    "\n",
    "megaline_users['age'] = megaline_users['age'].astype(int)\n",
    "\n",
    "megaline_users.drop_duplicates(subset='user_id', keep='first', inplace=True)\n",
    "\n",
    "megaline_users['plan'] = megaline_users['plan'].str.strip().str.lower()  # Remove spaces and make lowercase\n",
    "\n",
    "print(\"\\nMissing values after cleaning:\")\n",
    "display(megaline_users.isnull().sum())\n",
    "\n",
    "print(\"\\nCleaned DataFrame:\")\n",
    "display(megaline_users)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "~~Please make all calculation for megaline_users~~ </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enrich Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>account_age_months</th>\n",
       "      <th>churn_status</th>\n",
       "      <th>plan_duration_months</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>total_spend</th>\n",
       "      <th>location_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaT</td>\n",
       "      <td>73.333333</td>\n",
       "      <td>0</td>\n",
       "      <td>73.333333</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>70</td>\n",
       "      <td>5133.333333</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>77.766667</td>\n",
       "      <td>0</td>\n",
       "      <td>77.766667</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1555.333333</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV MSA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>75.466667</td>\n",
       "      <td>0</td>\n",
       "      <td>75.466667</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1509.333333</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK MSA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>84.333333</td>\n",
       "      <td>0</td>\n",
       "      <td>84.333333</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1686.666667</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>80.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>80.500000</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1610.000000</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>1495</td>\n",
       "      <td>Fidel</td>\n",
       "      <td>Sharpe</td>\n",
       "      <td>67</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-09-04</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>77.033333</td>\n",
       "      <td>0</td>\n",
       "      <td>77.033333</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1540.666667</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>1496</td>\n",
       "      <td>Ariel</td>\n",
       "      <td>Shepherd</td>\n",
       "      <td>49</td>\n",
       "      <td>New Orleans-Metairie, LA MSA</td>\n",
       "      <td>2018-02-20</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>83.566667</td>\n",
       "      <td>0</td>\n",
       "      <td>83.566667</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1671.333333</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>1497</td>\n",
       "      <td>Donte</td>\n",
       "      <td>Barrera</td>\n",
       "      <td>49</td>\n",
       "      <td>Los Angeles-Long Beach-Anaheim, CA MSA</td>\n",
       "      <td>2018-12-10</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaT</td>\n",
       "      <td>73.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>73.800000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>70</td>\n",
       "      <td>5166.000000</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>1498</td>\n",
       "      <td>Scot</td>\n",
       "      <td>Williamson</td>\n",
       "      <td>51</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-02-04</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>84.100000</td>\n",
       "      <td>0</td>\n",
       "      <td>84.100000</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1682.000000</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>1499</td>\n",
       "      <td>Shena</td>\n",
       "      <td>Dickson</td>\n",
       "      <td>37</td>\n",
       "      <td>Orlando-Kissimmee-Sanford, FL MSA</td>\n",
       "      <td>2018-05-06</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>81.066667</td>\n",
       "      <td>0</td>\n",
       "      <td>81.066667</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1621.333333</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id first_name   last_name  age  \\\n",
       "0       1000   Anamaria       Bauer   45   \n",
       "1       1001     Mickey   Wilkerson   28   \n",
       "2       1002     Carlee     Hoffman   36   \n",
       "3       1003   Reynaldo     Jenkins   52   \n",
       "4       1004    Leonila    Thompson   40   \n",
       "..       ...        ...         ...  ...   \n",
       "495     1495      Fidel      Sharpe   67   \n",
       "496     1496      Ariel    Shepherd   49   \n",
       "497     1497      Donte     Barrera   49   \n",
       "498     1498       Scot  Williamson   51   \n",
       "499     1499      Shena     Dickson   37   \n",
       "\n",
       "                                          city   reg_date      plan  \\\n",
       "0        Atlanta-Sandy Springs-Roswell, GA MSA 2018-12-24  ultimate   \n",
       "1              Seattle-Tacoma-Bellevue, WA MSA 2018-08-13      surf   \n",
       "2         Las Vegas-Henderson-Paradise, NV MSA 2018-10-21      surf   \n",
       "3                                Tulsa, OK MSA 2018-01-28      surf   \n",
       "4              Seattle-Tacoma-Bellevue, WA MSA 2018-05-23      surf   \n",
       "..                                         ...        ...       ...   \n",
       "495  New York-Newark-Jersey City, NY-NJ-PA MSA 2018-09-04      surf   \n",
       "496               New Orleans-Metairie, LA MSA 2018-02-20      surf   \n",
       "497     Los Angeles-Long Beach-Anaheim, CA MSA 2018-12-10  ultimate   \n",
       "498  New York-Newark-Jersey City, NY-NJ-PA MSA 2018-02-04      surf   \n",
       "499          Orlando-Kissimmee-Sanford, FL MSA 2018-05-06      surf   \n",
       "\n",
       "    churn_date  account_age_months  churn_status  plan_duration_months  \\\n",
       "0          NaT           73.333333             0             73.333333   \n",
       "1          NaT           77.766667             0             77.766667   \n",
       "2          NaT           75.466667             0             75.466667   \n",
       "3          NaT           84.333333             0             84.333333   \n",
       "4          NaT           80.500000             0             80.500000   \n",
       "..         ...                 ...           ...                   ...   \n",
       "495        NaT           77.033333             0             77.033333   \n",
       "496        NaT           83.566667             0             83.566667   \n",
       "497        NaT           73.800000             0             73.800000   \n",
       "498        NaT           84.100000             0             84.100000   \n",
       "499        NaT           81.066667             0             81.066667   \n",
       "\n",
       "    plan_name  usd_monthly_pay  total_spend location_group  \n",
       "0    ultimate               70  5133.333333          Urban  \n",
       "1        surf               20  1555.333333          Urban  \n",
       "2        surf               20  1509.333333          Other  \n",
       "3        surf               20  1686.666667          Other  \n",
       "4        surf               20  1610.000000          Urban  \n",
       "..        ...              ...          ...            ...  \n",
       "495      surf               20  1540.666667          Other  \n",
       "496      surf               20  1671.333333          Other  \n",
       "497  ultimate               70  5166.000000          Other  \n",
       "498      surf               20  1682.000000          Other  \n",
       "499      surf               20  1621.333333          Other  \n",
       "\n",
       "[500 rows x 15 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "megaline_users['reg_date'] = pd.to_datetime(megaline_users['reg_date'])\n",
    "megaline_users['churn_date'] = pd.to_datetime(megaline_users['churn_date'], errors='coerce')\n",
    "\n",
    "current_date = pd.to_datetime('2025-01-01')  \n",
    "megaline_users['account_age_months'] = (current_date - megaline_users['reg_date']) / pd.Timedelta(days=30)\n",
    "\n",
    "megaline_users['churn_status'] = megaline_users['churn_date'].apply(lambda x: 1 if pd.notnull(x) else 0)\n",
    "\n",
    "megaline_users['plan_duration_months'] = (megaline_users['churn_date'].fillna(current_date) - megaline_users['reg_date']) / pd.Timedelta(days=30)\n",
    "\n",
    "megaline_plans_data = {\n",
    "    'plan_name': ['ultimate', 'surf'],\n",
    "    'usd_monthly_pay': [70, 20]\n",
    "}\n",
    "\n",
    "megaline_users = pd.merge(megaline_users, megaline_plans[['plan_name', 'usd_monthly_pay']], left_on='plan', right_on='plan_name', how='left')\n",
    "\n",
    "megaline_users['total_spend'] = megaline_users['usd_monthly_pay'] * megaline_users['plan_duration_months']\n",
    "\n",
    "megaline_users['location_group'] = megaline_users['city'].apply(lambda x: 'Urban' if 'Seattle' in x or 'Atlanta' in x else 'Other')\n",
    "\n",
    "display(megaline_users)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment v4</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "    \n",
    "Great It would be nice to write explanations why you decided to create location_group and include Atlanta and Seattle in Urban category "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 137735 entries, 0 to 137734\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count   Dtype         \n",
      "---  ------     --------------   -----         \n",
      " 0   id         137735 non-null  object        \n",
      " 1   user_id    137735 non-null  int64         \n",
      " 2   call_date  137735 non-null  datetime64[ns]\n",
      " 3   duration   137735 non-null  float64       \n",
      "dtypes: datetime64[ns](1), float64(1), int64(1), object(1)\n",
      "memory usage: 4.2+ MB\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the calls' DataFrame\n",
    "megaline_calls_df = pd.DataFrame(megaline_calls)\n",
    "\n",
    "megaline_calls_df['call_date'] = pd.to_datetime(megaline_calls_df['call_date'])\n",
    "\n",
    "megaline_calls_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>69342</th>\n",
       "      <td>1249_134</td>\n",
       "      <td>1249</td>\n",
       "      <td>2018-09-17</td>\n",
       "      <td>5.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53471</th>\n",
       "      <td>1192_273</td>\n",
       "      <td>1192</td>\n",
       "      <td>2018-10-13</td>\n",
       "      <td>5.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17444</th>\n",
       "      <td>1066_555</td>\n",
       "      <td>1066</td>\n",
       "      <td>2018-03-18</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61522</th>\n",
       "      <td>1222_169</td>\n",
       "      <td>1222</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>5.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80703</th>\n",
       "      <td>1291_303</td>\n",
       "      <td>1291</td>\n",
       "      <td>2018-12-20</td>\n",
       "      <td>4.84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             id  user_id  call_date  duration\n",
       "69342  1249_134     1249 2018-09-17      5.98\n",
       "53471  1192_273     1192 2018-10-13      5.29\n",
       "17444  1066_555     1066 2018-03-18      0.00\n",
       "61522  1222_169     1222 2018-12-30      5.72\n",
       "80703  1291_303     1291 2018-12-20      4.84"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print a sample of data for calls\n",
    "megaline_calls_df['call_date'] = pd.to_datetime(megaline_calls_df['call_date'])\n",
    "\n",
    "sample_data = megaline_calls_df.sample(n=5)  \n",
    "display(sample_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nothing really stands out here to me. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "~~Please dont create new dataframes Use dataframes that you uploaded in the begining of the project~~</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fix data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values before cleaning:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "id           0\n",
       "user_id      0\n",
       "call_date    0\n",
       "duration     0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Checking for duplicates:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Duplicate rows: 0'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Checking for negative or invalid durations:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [id, user_id, call_date, duration]\n",
       "Index: []"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Data after cleaning:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137730</th>\n",
       "      <td>1499_199</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-11-21</td>\n",
       "      <td>8.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137731</th>\n",
       "      <td>1499_200</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10-20</td>\n",
       "      <td>10.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137732</th>\n",
       "      <td>1499_201</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09-21</td>\n",
       "      <td>8.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137733</th>\n",
       "      <td>1499_202</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10-10</td>\n",
       "      <td>0.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137734</th>\n",
       "      <td>1499_203</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>13.86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>137735 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              id  user_id  call_date  duration\n",
       "0        1000_93     1000 2018-12-27      8.52\n",
       "1       1000_145     1000 2018-12-27     13.66\n",
       "2       1000_247     1000 2018-12-27     14.48\n",
       "3       1000_309     1000 2018-12-28      5.76\n",
       "4       1000_380     1000 2018-12-30      4.22\n",
       "...          ...      ...        ...       ...\n",
       "137730  1499_199     1499 2018-11-21      8.72\n",
       "137731  1499_200     1499 2018-10-20     10.89\n",
       "137732  1499_201     1499 2018-09-21      8.12\n",
       "137733  1499_202     1499 2018-10-10      0.37\n",
       "137734  1499_203     1499 2018-12-29     13.86\n",
       "\n",
       "[137735 rows x 4 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "megaline_calls_df['call_date'] = pd.to_datetime(megaline_calls_df['call_date'])\n",
    "\n",
    "print(\"Missing values before cleaning:\")\n",
    "display(megaline_calls_df.isnull().sum())\n",
    "\n",
    "print(\"\\nChecking for duplicates:\")\n",
    "duplicates = megaline_calls_df.duplicated().sum()\n",
    "display(f\"Duplicate rows: {duplicates}\")\n",
    "\n",
    "print(\"\\nChecking for negative or invalid durations:\")\n",
    "invalid_durations = megaline_calls_df[megaline_calls_df['duration'] < 0]\n",
    "display(invalid_durations)\n",
    "\n",
    "megaline_calls_df['duration'] = pd.to_numeric(megaline_calls_df['duration'], errors='coerce')\n",
    "megaline_calls_df['user_id'] = megaline_calls_df['user_id'].astype(int)\n",
    "\n",
    "print(\"\\nData after cleaning:\")\n",
    "display(megaline_calls_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-warning\"> <b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "Here and further\n",
    "    \n",
    "Please dont repeat the same code twice It will not impact the result but will take additional memory for calculation For example you have \n",
    "    \n",
    "    megaline_calls_df['call_date'] = pd.to_datetime(megaline_calls_df['call_date'])\n",
    "    \n",
    "in cells 12, 13, 14"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enrich data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>call_duration_category</th>\n",
       "      <th>call_day_type</th>\n",
       "      <th>call_hour</th>\n",
       "      <th>month</th>\n",
       "      <th>monthly_call_count</th>\n",
       "      <th>total_duration_per_user</th>\n",
       "      <th>plan_duration_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>9.0</td>\n",
       "      <td>medium</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>16</td>\n",
       "      <td>124.0</td>\n",
       "      <td>0.248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.0</td>\n",
       "      <td>long</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>16</td>\n",
       "      <td>124.0</td>\n",
       "      <td>0.248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>15.0</td>\n",
       "      <td>long</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>16</td>\n",
       "      <td>124.0</td>\n",
       "      <td>0.248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>6.0</td>\n",
       "      <td>medium</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>16</td>\n",
       "      <td>124.0</td>\n",
       "      <td>0.248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>5.0</td>\n",
       "      <td>short</td>\n",
       "      <td>weekend</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>16</td>\n",
       "      <td>124.0</td>\n",
       "      <td>0.248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137730</th>\n",
       "      <td>1499_199</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-11-21</td>\n",
       "      <td>9.0</td>\n",
       "      <td>medium</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>45</td>\n",
       "      <td>1535.0</td>\n",
       "      <td>3.070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137731</th>\n",
       "      <td>1499_200</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10-20</td>\n",
       "      <td>11.0</td>\n",
       "      <td>long</td>\n",
       "      <td>weekend</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>53</td>\n",
       "      <td>1535.0</td>\n",
       "      <td>3.070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137732</th>\n",
       "      <td>1499_201</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09-21</td>\n",
       "      <td>9.0</td>\n",
       "      <td>medium</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>41</td>\n",
       "      <td>1535.0</td>\n",
       "      <td>3.070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137733</th>\n",
       "      <td>1499_202</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10-10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>short</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>53</td>\n",
       "      <td>1535.0</td>\n",
       "      <td>3.070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137734</th>\n",
       "      <td>1499_203</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>14.0</td>\n",
       "      <td>long</td>\n",
       "      <td>weekend</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>65</td>\n",
       "      <td>1535.0</td>\n",
       "      <td>3.070</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>137735 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              id  user_id  call_date  duration call_duration_category  \\\n",
       "0        1000_93     1000 2018-12-27       9.0                 medium   \n",
       "1       1000_145     1000 2018-12-27      14.0                   long   \n",
       "2       1000_247     1000 2018-12-27      15.0                   long   \n",
       "3       1000_309     1000 2018-12-28       6.0                 medium   \n",
       "4       1000_380     1000 2018-12-30       5.0                  short   \n",
       "...          ...      ...        ...       ...                    ...   \n",
       "137730  1499_199     1499 2018-11-21       9.0                 medium   \n",
       "137731  1499_200     1499 2018-10-20      11.0                   long   \n",
       "137732  1499_201     1499 2018-09-21       9.0                 medium   \n",
       "137733  1499_202     1499 2018-10-10       1.0                  short   \n",
       "137734  1499_203     1499 2018-12-29      14.0                   long   \n",
       "\n",
       "       call_day_type  call_hour    month  monthly_call_count  \\\n",
       "0            weekday          0  2018-12                  16   \n",
       "1            weekday          0  2018-12                  16   \n",
       "2            weekday          0  2018-12                  16   \n",
       "3            weekday          0  2018-12                  16   \n",
       "4            weekend          0  2018-12                  16   \n",
       "...              ...        ...      ...                 ...   \n",
       "137730       weekday          0  2018-11                  45   \n",
       "137731       weekend          0  2018-10                  53   \n",
       "137732       weekday          0  2018-09                  41   \n",
       "137733       weekday          0  2018-10                  53   \n",
       "137734       weekend          0  2018-12                  65   \n",
       "\n",
       "        total_duration_per_user  plan_duration_ratio  \n",
       "0                         124.0                0.248  \n",
       "1                         124.0                0.248  \n",
       "2                         124.0                0.248  \n",
       "3                         124.0                0.248  \n",
       "4                         124.0                0.248  \n",
       "...                         ...                  ...  \n",
       "137730                   1535.0                3.070  \n",
       "137731                   1535.0                3.070  \n",
       "137732                   1535.0                3.070  \n",
       "137733                   1535.0                3.070  \n",
       "137734                   1535.0                3.070  \n",
       "\n",
       "[137735 rows x 11 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "megaline_calls_df['call_date'] = pd.to_datetime(megaline_calls_df['call_date'])\n",
    "\n",
    "bins = [0, 5, 10, float('inf')]  \n",
    "labels = ['short', 'medium', 'long']\n",
    "megaline_calls_df['call_duration_category'] = pd.cut(megaline_calls_df['duration'], bins=bins, labels=labels, right=False)\n",
    "\n",
    "megaline_calls_df['call_day_type'] = megaline_calls_df['call_date'].dt.dayofweek\n",
    "megaline_calls_df['call_day_type'] = megaline_calls_df['call_day_type'].apply(lambda x: 'weekend' if x >= 5 else 'weekday')\n",
    "\n",
    "megaline_calls_df['call_hour'] = megaline_calls_df['call_date'].dt.hour\n",
    "\n",
    "megaline_calls_df['month'] = megaline_calls_df['call_date'].dt.to_period('M')\n",
    "monthly_call_counts = megaline_calls_df.groupby(['user_id', 'month'])['id'].count().reset_index()\n",
    "monthly_call_counts.rename(columns={'id': 'monthly_call_count'}, inplace=True)\n",
    "megaline_calls_df = megaline_calls_df.merge(monthly_call_counts, on=['user_id', 'month'], how='left')\n",
    "megaline_calls_df['duration'] = np.ceil(megaline_calls_df['duration'])\n",
    "\n",
    "total_duration_per_user = megaline_calls_df.groupby('user_id')['duration'].sum().reset_index()\n",
    "total_duration_per_user.rename(columns={'duration': 'total_duration_per_user'}, inplace=True)\n",
    "megaline_calls_df = megaline_calls_df.merge(total_duration_per_user, on='user_id', how='left')\n",
    "\n",
    "megaline_calls_df['plan_duration_ratio'] = megaline_calls_df['total_duration_per_user'] / 500\n",
    "\n",
    "display(megaline_calls_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "~~Please make all calculation for megaline_calls~~ </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "According to the brief you need to round up duration of each call So here you need to uce np.ceil from numpy library\n",
    "    \n",
    "    megaline_calls_df['duration'] = np.ceil(megaline_calls_df['duration'] )\n",
    "    \n",
    "Also it is better to keep dataframes with aggregated and not aggregated data separately It means we dont need to merge total_duration_per_user and monthly_call_counts to megaline_calls_df\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Messages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 76051 entries, 0 to 76050\n",
      "Data columns (total 3 columns):\n",
      " #   Column        Non-Null Count  Dtype         \n",
      "---  ------        --------------  -----         \n",
      " 0   id            76051 non-null  object        \n",
      " 1   user_id       76051 non-null  int64         \n",
      " 2   message_date  76051 non-null  datetime64[ns]\n",
      "dtypes: datetime64[ns](1), int64(1), object(1)\n",
      "memory usage: 1.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the messages' DataFrame\n",
    "megaline_messages_df = pd.DataFrame(megaline_messages)\n",
    "\n",
    "megaline_messages_df['message_date'] = pd.to_datetime(megaline_messages_df['message_date'])\n",
    "\n",
    "megaline_messages_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>71539</th>\n",
       "      <td>1466_191</td>\n",
       "      <td>1466</td>\n",
       "      <td>2018-08-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17202</th>\n",
       "      <td>1113_330</td>\n",
       "      <td>1113</td>\n",
       "      <td>2018-11-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54690</th>\n",
       "      <td>1346_193</td>\n",
       "      <td>1346</td>\n",
       "      <td>2018-11-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60372</th>\n",
       "      <td>1381_485</td>\n",
       "      <td>1381</td>\n",
       "      <td>2018-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71264</th>\n",
       "      <td>1465_204</td>\n",
       "      <td>1465</td>\n",
       "      <td>2018-07-30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             id  user_id message_date\n",
       "71539  1466_191     1466   2018-08-30\n",
       "17202  1113_330     1113   2018-11-08\n",
       "54690  1346_193     1346   2018-11-20\n",
       "60372  1381_485     1381   2018-12-29\n",
       "71264  1465_204     1465   2018-07-30"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print a sample of data for messages\n",
    "megaline_messages_df['message_date'] = pd.to_datetime(megaline_messages_df['message_date'])\n",
    "\n",
    "sample_data = megaline_messages_df.sample(n=5)  \n",
    "display(sample_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "~~Please dont create new dataframes Use dataframes that you uploaded in the begining of the project~~</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fix data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values before cleaning:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "id              0\n",
       "user_id         0\n",
       "message_date    0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\"Duplicate rows based on 'id': 0\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Invalid message dates (NaT or out-of-range dates): Empty DataFrame\\nColumns: [id, user_id, message_date]\\nIndex: []'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Data after cleaning:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_125</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_160</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_223</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_251</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_255</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76046</th>\n",
       "      <td>1497_526</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76047</th>\n",
       "      <td>1497_536</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76048</th>\n",
       "      <td>1497_547</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76049</th>\n",
       "      <td>1497_558</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76050</th>\n",
       "      <td>1497_613</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76051 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id  user_id message_date\n",
       "0      1000_125     1000   2018-12-27\n",
       "1      1000_160     1000   2018-12-31\n",
       "2      1000_223     1000   2018-12-31\n",
       "3      1000_251     1000   2018-12-27\n",
       "4      1000_255     1000   2018-12-26\n",
       "...         ...      ...          ...\n",
       "76046  1497_526     1497   2018-12-24\n",
       "76047  1497_536     1497   2018-12-24\n",
       "76048  1497_547     1497   2018-12-31\n",
       "76049  1497_558     1497   2018-12-24\n",
       "76050  1497_613     1497   2018-12-23\n",
       "\n",
       "[76051 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Missing values before cleaning:\")\n",
    "display(megaline_messages_df.isnull().sum())\n",
    "\n",
    "megaline_messages_df['message_date'] = pd.to_datetime(megaline_messages_df['message_date'], errors='coerce')\n",
    "\n",
    "megaline_messages_df['user_id'] = megaline_messages_df['user_id'].astype(int)\n",
    "\n",
    "duplicates = megaline_messages_df.duplicated(subset='id').sum()\n",
    "display(f\"Duplicate rows based on 'id': {duplicates}\")\n",
    "megaline_messages_df.drop_duplicates(subset='id', keep='first', inplace=True)\n",
    "\n",
    "invalid_dates = megaline_messages_df[megaline_messages_df['message_date'].isnull()]\n",
    "display(f\"Invalid message dates (NaT or out-of-range dates): {invalid_dates}\")\n",
    "\n",
    "print(\"\\nData after cleaning:\")\n",
    "display(megaline_messages_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "~~Please make all calculation for megaline_messages~~ </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enrich data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>message_day_of_week</th>\n",
       "      <th>message_month</th>\n",
       "      <th>month</th>\n",
       "      <th>monthly_message_count</th>\n",
       "      <th>messages_per_day</th>\n",
       "      <th>message_hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_125</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>December</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>11</td>\n",
       "      <td>1.571429</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_160</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>Monday</td>\n",
       "      <td>December</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>11</td>\n",
       "      <td>1.571429</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_223</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>Monday</td>\n",
       "      <td>December</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>11</td>\n",
       "      <td>1.571429</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_251</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>December</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>11</td>\n",
       "      <td>1.571429</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_255</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>December</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>11</td>\n",
       "      <td>1.571429</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76046</th>\n",
       "      <td>1497_526</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>Monday</td>\n",
       "      <td>December</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>50</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76047</th>\n",
       "      <td>1497_536</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>Monday</td>\n",
       "      <td>December</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>50</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76048</th>\n",
       "      <td>1497_547</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>Monday</td>\n",
       "      <td>December</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>50</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76049</th>\n",
       "      <td>1497_558</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>Monday</td>\n",
       "      <td>December</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>50</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76050</th>\n",
       "      <td>1497_613</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-23</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>December</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>50</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76051 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id  user_id message_date message_day_of_week message_month  \\\n",
       "0      1000_125     1000   2018-12-27            Thursday      December   \n",
       "1      1000_160     1000   2018-12-31              Monday      December   \n",
       "2      1000_223     1000   2018-12-31              Monday      December   \n",
       "3      1000_251     1000   2018-12-27            Thursday      December   \n",
       "4      1000_255     1000   2018-12-26           Wednesday      December   \n",
       "...         ...      ...          ...                 ...           ...   \n",
       "76046  1497_526     1497   2018-12-24              Monday      December   \n",
       "76047  1497_536     1497   2018-12-24              Monday      December   \n",
       "76048  1497_547     1497   2018-12-31              Monday      December   \n",
       "76049  1497_558     1497   2018-12-24              Monday      December   \n",
       "76050  1497_613     1497   2018-12-23              Sunday      December   \n",
       "\n",
       "         month  monthly_message_count  messages_per_day  message_hour  \n",
       "0      2018-12                     11          1.571429             0  \n",
       "1      2018-12                     11          1.571429             0  \n",
       "2      2018-12                     11          1.571429             0  \n",
       "3      2018-12                     11          1.571429             0  \n",
       "4      2018-12                     11          1.571429             0  \n",
       "...        ...                    ...               ...           ...  \n",
       "76046  2018-12                     50          2.500000             0  \n",
       "76047  2018-12                     50          2.500000             0  \n",
       "76048  2018-12                     50          2.500000             0  \n",
       "76049  2018-12                     50          2.500000             0  \n",
       "76050  2018-12                     50          2.500000             0  \n",
       "\n",
       "[76051 rows x 9 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "megaline_messages_df['message_date'] = pd.to_datetime(megaline_messages_df['message_date'])\n",
    "\n",
    "megaline_messages_df['message_day_of_week'] = megaline_messages_df['message_date'].dt.day_name()\n",
    "\n",
    "megaline_messages_df['message_month'] = megaline_messages_df['message_date'].dt.month_name()\n",
    "\n",
    "megaline_messages_df['month'] = megaline_messages_df['message_date'].dt.to_period('M')  # Group by month\n",
    "monthly_message_counts = megaline_messages_df.groupby(['user_id', 'month'])['id'].count().reset_index()\n",
    "monthly_message_counts.rename(columns={'id': 'monthly_message_count'}, inplace=True)\n",
    "megaline_messages_df = megaline_messages_df.merge(monthly_message_counts, on=['user_id', 'month'], how='left')\n",
    "\n",
    "messages_per_day = megaline_messages_df.groupby('user_id').size().reset_index(name='total_messages')\n",
    "days_active = megaline_messages_df.groupby('user_id')['message_date'].nunique().reset_index(name='days_active')\n",
    "messages_per_day = pd.merge(messages_per_day, days_active, on='user_id')\n",
    "messages_per_day['messages_per_day'] = messages_per_day['total_messages'] / messages_per_day['days_active']\n",
    "\n",
    "megaline_messages_df = megaline_messages_df.merge(messages_per_day[['user_id', 'messages_per_day']], on='user_id', how='left')\n",
    "\n",
    "megaline_messages_df['message_hour'] = megaline_messages_df['message_date'].dt.hour\n",
    "\n",
    "display(megaline_messages_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "\n",
    "~~Please make all calculation for megaline_messages~~ </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment v4</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "    \n",
    "Very deep analysis of messages One recommendation - before creating additional columns you need to think if you will use them in your analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Internet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 104825 entries, 0 to 104824\n",
      "Data columns (total 4 columns):\n",
      " #   Column        Non-Null Count   Dtype         \n",
      "---  ------        --------------   -----         \n",
      " 0   id            104825 non-null  object        \n",
      " 1   user_id       104825 non-null  int64         \n",
      " 2   session_date  104825 non-null  datetime64[ns]\n",
      " 3   mb_used       104825 non-null  float64       \n",
      "dtypes: datetime64[ns](1), float64(1), int64(1), object(1)\n",
      "memory usage: 3.2+ MB\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the internet DataFrame\n",
    "megaline_internet_df = pd.DataFrame(megaline_internet)\n",
    "\n",
    "megaline_internet_df['session_date'] = pd.to_datetime(megaline_internet_df['session_date'])\n",
    "\n",
    "megaline_internet_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>48673</th>\n",
       "      <td>1217_13</td>\n",
       "      <td>1217</td>\n",
       "      <td>2018-12-01</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40838</th>\n",
       "      <td>1183_29</td>\n",
       "      <td>1183</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>599.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53720</th>\n",
       "      <td>1243_22</td>\n",
       "      <td>1243</td>\n",
       "      <td>2018-12-18</td>\n",
       "      <td>168.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17129</th>\n",
       "      <td>1077_249</td>\n",
       "      <td>1077</td>\n",
       "      <td>2018-11-01</td>\n",
       "      <td>463.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10444</th>\n",
       "      <td>1053_574</td>\n",
       "      <td>1053</td>\n",
       "      <td>2018-09-04</td>\n",
       "      <td>475.58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             id  user_id session_date  mb_used\n",
       "48673   1217_13     1217   2018-12-01     0.00\n",
       "40838   1183_29     1183   2018-12-26   599.96\n",
       "53720   1243_22     1243   2018-12-18   168.56\n",
       "17129  1077_249     1077   2018-11-01   463.66\n",
       "10444  1053_574     1053   2018-09-04   475.58"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print a sample of data for the internet traffic\n",
    "megaline_internet_df['session_date'] = pd.to_datetime(megaline_internet_df['session_date'])\n",
    "\n",
    "sample_data = megaline_internet_df.sample(n=5)  \n",
    "display(sample_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this sample we can tell that there is a very random amount of usage over a five day period."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fix data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Fix obvious issues with the data given the initial observations.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values before cleaning:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "id              0\n",
       "user_id         0\n",
       "session_date    0\n",
       "mb_used         0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\"\\nDuplicate rows based on 'id': 0\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Invalid data usage (negative values):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [id, user_id, session_date, mb_used]\n",
       "Index: []"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Data after cleaning:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_13</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_204</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_379</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>660.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_413</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>270.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_442</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>880.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104820</th>\n",
       "      <td>1499_215</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10-20</td>\n",
       "      <td>218.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104821</th>\n",
       "      <td>1499_216</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>304.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104822</th>\n",
       "      <td>1499_217</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09-22</td>\n",
       "      <td>292.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104823</th>\n",
       "      <td>1499_218</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-07</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104824</th>\n",
       "      <td>1499_219</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>758.31</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>104825 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              id  user_id session_date  mb_used\n",
       "0        1000_13     1000   2018-12-29    89.86\n",
       "1       1000_204     1000   2018-12-31     0.00\n",
       "2       1000_379     1000   2018-12-28   660.40\n",
       "3       1000_413     1000   2018-12-26   270.99\n",
       "4       1000_442     1000   2018-12-27   880.22\n",
       "...          ...      ...          ...      ...\n",
       "104820  1499_215     1499   2018-10-20   218.06\n",
       "104821  1499_216     1499   2018-12-30   304.72\n",
       "104822  1499_217     1499   2018-09-22   292.75\n",
       "104823  1499_218     1499   2018-12-07     0.00\n",
       "104824  1499_219     1499   2018-12-24   758.31\n",
       "\n",
       "[104825 rows x 4 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Missing values before cleaning:\")\n",
    "display(megaline_internet_df.isnull().sum())\n",
    "\n",
    "megaline_internet_df['session_date'] = pd.to_datetime(megaline_internet_df['session_date'])\n",
    "\n",
    "megaline_internet_df['mb_used'] = pd.to_numeric(megaline_internet_df['mb_used'], errors='coerce')\n",
    "\n",
    "duplicates = megaline_internet_df.duplicated(subset='id').sum()\n",
    "display(f\"\\nDuplicate rows based on 'id': {duplicates}\")\n",
    "megaline_internet_df.drop_duplicates(subset='id', keep='first', inplace=True)\n",
    "\n",
    "invalid_data_usage = megaline_internet_df[megaline_internet_df['mb_used'] < 0]\n",
    "print(\"\\nInvalid data usage (negative values):\")\n",
    "display(invalid_data_usage)\n",
    "\n",
    "print(\"\\nData after cleaning:\")\n",
    "display(megaline_internet_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "~~Please make all calculation for megaline_internet~~ </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enrich data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>data_usage_category</th>\n",
       "      <th>usage_day_of_week</th>\n",
       "      <th>usage_hour</th>\n",
       "      <th>month</th>\n",
       "      <th>monthly_data_usage</th>\n",
       "      <th>cumulative_data_usage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_13</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "      <td>low</td>\n",
       "      <td>weekend</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>89.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_204</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>0.00</td>\n",
       "      <td>low</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>89.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_379</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>660.40</td>\n",
       "      <td>high</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>750.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_413</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>270.99</td>\n",
       "      <td>medium</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>1021.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_442</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>880.22</td>\n",
       "      <td>high</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>1901.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104820</th>\n",
       "      <td>1499_215</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10-20</td>\n",
       "      <td>218.06</td>\n",
       "      <td>medium</td>\n",
       "      <td>weekend</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>19492.43</td>\n",
       "      <td>69994.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104821</th>\n",
       "      <td>1499_216</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>304.72</td>\n",
       "      <td>medium</td>\n",
       "      <td>weekend</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>22059.21</td>\n",
       "      <td>70299.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104822</th>\n",
       "      <td>1499_217</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09-22</td>\n",
       "      <td>292.75</td>\n",
       "      <td>medium</td>\n",
       "      <td>weekend</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>12984.76</td>\n",
       "      <td>70591.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104823</th>\n",
       "      <td>1499_218</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>low</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>22059.21</td>\n",
       "      <td>70591.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104824</th>\n",
       "      <td>1499_219</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>758.31</td>\n",
       "      <td>high</td>\n",
       "      <td>weekday</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>22059.21</td>\n",
       "      <td>71350.23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>104825 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              id  user_id session_date  mb_used data_usage_category  \\\n",
       "0        1000_13     1000   2018-12-29    89.86                 low   \n",
       "1       1000_204     1000   2018-12-31     0.00                 low   \n",
       "2       1000_379     1000   2018-12-28   660.40                high   \n",
       "3       1000_413     1000   2018-12-26   270.99              medium   \n",
       "4       1000_442     1000   2018-12-27   880.22                high   \n",
       "...          ...      ...          ...      ...                 ...   \n",
       "104820  1499_215     1499   2018-10-20   218.06              medium   \n",
       "104821  1499_216     1499   2018-12-30   304.72              medium   \n",
       "104822  1499_217     1499   2018-09-22   292.75              medium   \n",
       "104823  1499_218     1499   2018-12-07     0.00                 low   \n",
       "104824  1499_219     1499   2018-12-24   758.31                high   \n",
       "\n",
       "       usage_day_of_week  usage_hour    month  monthly_data_usage  \\\n",
       "0                weekend           0  2018-12             1901.47   \n",
       "1                weekday           0  2018-12             1901.47   \n",
       "2                weekday           0  2018-12             1901.47   \n",
       "3                weekday           0  2018-12             1901.47   \n",
       "4                weekday           0  2018-12             1901.47   \n",
       "...                  ...         ...      ...                 ...   \n",
       "104820           weekend           0  2018-10            19492.43   \n",
       "104821           weekend           0  2018-12            22059.21   \n",
       "104822           weekend           0  2018-09            12984.76   \n",
       "104823           weekday           0  2018-12            22059.21   \n",
       "104824           weekday           0  2018-12            22059.21   \n",
       "\n",
       "        cumulative_data_usage  \n",
       "0                       89.86  \n",
       "1                       89.86  \n",
       "2                      750.26  \n",
       "3                     1021.25  \n",
       "4                     1901.47  \n",
       "...                       ...  \n",
       "104820               69994.45  \n",
       "104821               70299.17  \n",
       "104822               70591.92  \n",
       "104823               70591.92  \n",
       "104824               71350.23  \n",
       "\n",
       "[104825 rows x 10 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "megaline_internet_df['session_date'] = pd.to_datetime(megaline_internet_df['session_date'])\n",
    "\n",
    "bins = [0, 100, 500, float('inf')]  \n",
    "labels = ['low', 'medium', 'high']\n",
    "megaline_internet_df['data_usage_category'] = pd.cut(megaline_internet_df['mb_used'], bins=bins, labels=labels, right=False)\n",
    "\n",
    "megaline_internet_df['usage_day_of_week'] = megaline_internet_df['session_date'].dt.dayofweek\n",
    "megaline_internet_df['usage_day_of_week'] = megaline_internet_df['usage_day_of_week'].apply(lambda x: 'weekend' if x >= 5 else 'weekday')\n",
    "\n",
    "megaline_internet_df['usage_hour'] = megaline_internet_df['session_date'].dt.hour\n",
    "\n",
    "megaline_internet_df['month'] = megaline_internet_df['session_date'].dt.to_period('M')  \n",
    "monthly_data_usage = megaline_internet_df.groupby(['user_id', 'month'])['mb_used'].sum().reset_index()\n",
    "monthly_data_usage.rename(columns={'mb_used': 'monthly_data_usage'}, inplace=True)\n",
    "megaline_internet_df = megaline_internet_df.merge(monthly_data_usage, on=['user_id', 'month'], how='left')\n",
    "\n",
    "megaline_internet_df['cumulative_data_usage'] = megaline_internet_df.groupby('user_id')['mb_used'].cumsum()\n",
    "\n",
    "display(megaline_internet_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can tell from this data above that some of our customers would greatly benefit from out Ultimate Plan due to their high usage of data used per month."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "~~Please make all calculation for megaline_internet~~ </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment v4</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "    \n",
    "Well done"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Study plan conditions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[It is critical to understand how the plans work, how users are charged based on their plan subscription. So, we suggest printing out the plan information to view their conditions once again.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>usd_annual_pay</th>\n",
       "      <th>gb_per_month</th>\n",
       "      <th>avg_cost_per_minute</th>\n",
       "      <th>avg_cost_per_gb</th>\n",
       "      <th>avg_cost_per_message</th>\n",
       "      <th>plan_popularity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>840</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.023333</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.07</td>\n",
       "      <td>500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \\\n",
       "0               20          10             0.03            0.03      surf   \n",
       "1               70           7             0.01            0.01  ultimate   \n",
       "\n",
       "   usd_annual_pay  gb_per_month  avg_cost_per_minute  avg_cost_per_gb  \\\n",
       "0             240          15.0             0.040000         1.333333   \n",
       "1             840          30.0             0.023333         2.333333   \n",
       "\n",
       "   avg_cost_per_message  plan_popularity  \n",
       "0                  0.40              150  \n",
       "1                  0.07              500  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_3d9f5_\" class=\"table table-striped\"><caption>Megaline Plans Conditions</caption><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >messages_included</th>        <th class=\"col_heading level0 col1\" >mb_per_month_included</th>        <th class=\"col_heading level0 col2\" >minutes_included</th>        <th class=\"col_heading level0 col3\" >usd_monthly_pay</th>        <th class=\"col_heading level0 col4\" >usd_per_gb</th>        <th class=\"col_heading level0 col5\" >usd_per_message</th>        <th class=\"col_heading level0 col6\" >usd_per_minute</th>        <th class=\"col_heading level0 col7\" >plan_name</th>        <th class=\"col_heading level0 col8\" >usd_annual_pay</th>        <th class=\"col_heading level0 col9\" >gb_per_month</th>        <th class=\"col_heading level0 col10\" >avg_cost_per_minute</th>        <th class=\"col_heading level0 col11\" >avg_cost_per_gb</th>        <th class=\"col_heading level0 col12\" >avg_cost_per_message</th>        <th class=\"col_heading level0 col13\" >plan_popularity</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_3d9f5_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "                        <td id=\"T_3d9f5_row0_col0\" class=\"data row0 col0\" >50</td>\n",
       "                        <td id=\"T_3d9f5_row0_col1\" class=\"data row0 col1\" >15360</td>\n",
       "                        <td id=\"T_3d9f5_row0_col2\" class=\"data row0 col2\" >500</td>\n",
       "                        <td id=\"T_3d9f5_row0_col3\" class=\"data row0 col3\" >20</td>\n",
       "                        <td id=\"T_3d9f5_row0_col4\" class=\"data row0 col4\" >10</td>\n",
       "                        <td id=\"T_3d9f5_row0_col5\" class=\"data row0 col5\" >0.030000</td>\n",
       "                        <td id=\"T_3d9f5_row0_col6\" class=\"data row0 col6\" >0.030000</td>\n",
       "                        <td id=\"T_3d9f5_row0_col7\" class=\"data row0 col7\" >surf</td>\n",
       "                        <td id=\"T_3d9f5_row0_col8\" class=\"data row0 col8\" >240</td>\n",
       "                        <td id=\"T_3d9f5_row0_col9\" class=\"data row0 col9\" >15.000000</td>\n",
       "                        <td id=\"T_3d9f5_row0_col10\" class=\"data row0 col10\" >0.040000</td>\n",
       "                        <td id=\"T_3d9f5_row0_col11\" class=\"data row0 col11\" >1.333333</td>\n",
       "                        <td id=\"T_3d9f5_row0_col12\" class=\"data row0 col12\" >0.400000</td>\n",
       "                        <td id=\"T_3d9f5_row0_col13\" class=\"data row0 col13\" >150</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_3d9f5_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "                        <td id=\"T_3d9f5_row1_col0\" class=\"data row1 col0\" >1000</td>\n",
       "                        <td id=\"T_3d9f5_row1_col1\" class=\"data row1 col1\" >30720</td>\n",
       "                        <td id=\"T_3d9f5_row1_col2\" class=\"data row1 col2\" >3000</td>\n",
       "                        <td id=\"T_3d9f5_row1_col3\" class=\"data row1 col3\" >70</td>\n",
       "                        <td id=\"T_3d9f5_row1_col4\" class=\"data row1 col4\" >7</td>\n",
       "                        <td id=\"T_3d9f5_row1_col5\" class=\"data row1 col5\" >0.010000</td>\n",
       "                        <td id=\"T_3d9f5_row1_col6\" class=\"data row1 col6\" >0.010000</td>\n",
       "                        <td id=\"T_3d9f5_row1_col7\" class=\"data row1 col7\" >ultimate</td>\n",
       "                        <td id=\"T_3d9f5_row1_col8\" class=\"data row1 col8\" >840</td>\n",
       "                        <td id=\"T_3d9f5_row1_col9\" class=\"data row1 col9\" >30.000000</td>\n",
       "                        <td id=\"T_3d9f5_row1_col10\" class=\"data row1 col10\" >0.023333</td>\n",
       "                        <td id=\"T_3d9f5_row1_col11\" class=\"data row1 col11\" >2.333333</td>\n",
       "                        <td id=\"T_3d9f5_row1_col12\" class=\"data row1 col12\" >0.070000</td>\n",
       "                        <td id=\"T_3d9f5_row1_col13\" class=\"data row1 col13\" >500</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fa0e293f610>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Print out the plan conditions and make sure they are clear for you\n",
    "display(megaline_plans_df)\n",
    "\n",
    "megaline_plans_df.style.set_table_attributes('class=\"table table-striped\"').set_caption(\"Megaline Plans Conditions\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above table shows us a few different things that will help us improve our advertising strategy. First off we can see that the cost for the customer per GB is lower and they get twice the amount. Second, the cost per minute and message is also cheaper on the Ultimate plan then the Surf plan. The Ultimate plan is our big money maker as every one of our customers on that plan covers three customers with the surf plan."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "~~Please dont create new dataframes Use dataframes that you uploaded in the begining of the project~~</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-warning\"> <b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "When you use style formating we can not read column names "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Aggregate data per user\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment</b> <a class=\"tocSkip\"></a>\n",
    "\n",
    "~~Here and further - all calculations should be done for dataframes that you uploaded in the begining You can not make analysis on dataframes that contains 5 rows~~</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>call_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>1498</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2257</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2258 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id    month  call_count\n",
       "0        1000  2018-12          16\n",
       "1        1001  2018-08          27\n",
       "2        1001  2018-09          49\n",
       "3        1001  2018-10          65\n",
       "4        1001  2018-11          64\n",
       "...       ...      ...         ...\n",
       "2253     1498  2018-12          39\n",
       "2254     1499  2018-09          41\n",
       "2255     1499  2018-10          53\n",
       "2256     1499  2018-11          45\n",
       "2257     1499  2018-12          65\n",
       "\n",
       "[2258 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the number of calls made by each user per month. Save the result.\n",
    "megaline_calls['call_date'] = pd.to_datetime(megaline_calls['call_date'])\n",
    "\n",
    "megaline_calls['month'] = megaline_calls['call_date'].dt.to_period('M')\n",
    "\n",
    "calls_per_user_per_month = megaline_calls.groupby(['user_id', 'month']).size().reset_index(name='call_count')\n",
    "\n",
    "calls_per_user_per_month.to_csv('calls_per_user_per_month.csv', index=False)\n",
    "\n",
    "display(calls_per_user_per_month)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_minutes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>124.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>182.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>315.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>393.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>426.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>1498</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>339.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>346.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>385.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>308.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2257</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>496.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2258 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id    month  total_minutes\n",
       "0        1000  2018-12          124.0\n",
       "1        1001  2018-08          182.0\n",
       "2        1001  2018-09          315.0\n",
       "3        1001  2018-10          393.0\n",
       "4        1001  2018-11          426.0\n",
       "...       ...      ...            ...\n",
       "2253     1498  2018-12          339.0\n",
       "2254     1499  2018-09          346.0\n",
       "2255     1499  2018-10          385.0\n",
       "2256     1499  2018-11          308.0\n",
       "2257     1499  2018-12          496.0\n",
       "\n",
       "[2258 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the amount of minutes spent by each user per month. Save the result.\n",
    "megaline_calls['call_date'] = pd.to_datetime(megaline_calls['call_date'])\n",
    "\n",
    "megaline_calls['month'] = megaline_calls['call_date'].dt.to_period('M')\n",
    "megaline_calls['duration']  = np.ceil(megaline_calls['duration'])\n",
    "\n",
    "minutes_per_user_per_month = megaline_calls.groupby(['user_id', 'month'])['duration'].sum().reset_index(name='total_minutes')\n",
    "\n",
    "minutes_per_user_per_month.to_csv('minutes_per_user_per_month.csv', index=False)\n",
    "\n",
    "display(minutes_per_user_per_month,)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "According to the brief we need to round up duration of each call Please make it before aggregation First you need to use \n",
    "    \n",
    "    megaline_calls_df['duration']  = np.ceil(megaline_calls_df['duration'])\n",
    "    \n",
    "and only after\n",
    "    \n",
    "    minutes_per_user_per_month = megaline_calls_df.groupby(['user_id', 'month'])['duration'].sum().reset_index(name='total_minutes')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>message_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1801</th>\n",
       "      <td>1496</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1802</th>\n",
       "      <td>1496</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1803</th>\n",
       "      <td>1496</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1804</th>\n",
       "      <td>1496</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1805</th>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1806 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id    month  message_count\n",
       "0        1000  2018-12             11\n",
       "1        1001  2018-08             30\n",
       "2        1001  2018-09             44\n",
       "3        1001  2018-10             53\n",
       "4        1001  2018-11             36\n",
       "...       ...      ...            ...\n",
       "1801     1496  2018-09             21\n",
       "1802     1496  2018-10             18\n",
       "1803     1496  2018-11             13\n",
       "1804     1496  2018-12             11\n",
       "1805     1497  2018-12             50\n",
       "\n",
       "[1806 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the number of messages sent by each user per month. Save the result.\n",
    "megaline_messages['message_date'] = pd.to_datetime(megaline_messages['message_date'])\n",
    "\n",
    "megaline_messages['month'] = megaline_messages['message_date'].dt.to_period('M')\n",
    "\n",
    "messages_per_user_per_month = megaline_messages.groupby(['user_id', 'month']).size().reset_index(name='message_count')\n",
    "\n",
    "messages_per_user_per_month.to_csv('messages_per_user_per_month.csv', index=False)\n",
    "\n",
    "display(messages_per_user_per_month)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment v4</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "    \n",
    "Perfect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>6919.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>13314.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>22330.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>18504.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2272</th>\n",
       "      <td>1498</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>23137.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2273</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>12984.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2274</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>19492.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2275</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>16813.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2276</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>22059.21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2277 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id    month  total_traffic_mb\n",
       "0        1000  2018-12           1901.47\n",
       "1        1001  2018-08           6919.15\n",
       "2        1001  2018-09          13314.82\n",
       "3        1001  2018-10          22330.49\n",
       "4        1001  2018-11          18504.30\n",
       "...       ...      ...               ...\n",
       "2272     1498  2018-12          23137.69\n",
       "2273     1499  2018-09          12984.76\n",
       "2274     1499  2018-10          19492.43\n",
       "2275     1499  2018-11          16813.83\n",
       "2276     1499  2018-12          22059.21\n",
       "\n",
       "[2277 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the volume of internet traffic used by each user per month. Save the result.\n",
    "megaline_internet['session_date'] = pd.to_datetime(megaline_internet['session_date'])\n",
    "\n",
    "megaline_internet['month'] = megaline_internet['session_date'].dt.to_period('M')\n",
    "\n",
    "traffic_per_user_per_month = megaline_internet.groupby(['user_id', 'month'])['mb_used'].sum().reset_index(name='total_traffic_mb')\n",
    "\n",
    "traffic_per_user_per_month.to_csv('traffic_per_user_per_month.csv', index=False)\n",
    "\n",
    "display(traffic_per_user_per_month)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment v4</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "    \n",
    "Correct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>16</td>\n",
       "      <td>124.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>27</td>\n",
       "      <td>182.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>49</td>\n",
       "      <td>315.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>65</td>\n",
       "      <td>393.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>64</td>\n",
       "      <td>426.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>1498</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>39</td>\n",
       "      <td>339.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23137.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>41</td>\n",
       "      <td>346.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12984.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>53</td>\n",
       "      <td>385.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19492.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>45</td>\n",
       "      <td>308.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16813.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2257</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>65</td>\n",
       "      <td>496.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22059.21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2258 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id    month  call_count  total_minutes  message_count  \\\n",
       "0        1000  2018-12          16          124.0           11.0   \n",
       "1        1001  2018-08          27          182.0           30.0   \n",
       "2        1001  2018-09          49          315.0           44.0   \n",
       "3        1001  2018-10          65          393.0           53.0   \n",
       "4        1001  2018-11          64          426.0           36.0   \n",
       "...       ...      ...         ...            ...            ...   \n",
       "2253     1498  2018-12          39          339.0            NaN   \n",
       "2254     1499  2018-09          41          346.0            NaN   \n",
       "2255     1499  2018-10          53          385.0            NaN   \n",
       "2256     1499  2018-11          45          308.0            NaN   \n",
       "2257     1499  2018-12          65          496.0            NaN   \n",
       "\n",
       "      total_traffic_mb  \n",
       "0              1901.47  \n",
       "1              6919.15  \n",
       "2             13314.82  \n",
       "3             22330.49  \n",
       "4             18504.30  \n",
       "...                ...  \n",
       "2253          23137.69  \n",
       "2254          12984.76  \n",
       "2255          19492.43  \n",
       "2256          16813.83  \n",
       "2257          22059.21  \n",
       "\n",
       "[2258 rows x 6 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Merge the data for calls, minutes, messages, internet based on user_id and month\n",
    "merged_data = pd.merge(calls_per_user_per_month, minutes_per_user_per_month, on=['user_id', 'month'], how='left')\n",
    "merged_data = pd.merge(merged_data, messages_per_user_per_month, on=['user_id', 'month'], how='left')\n",
    "merged_data = pd.merge(merged_data, traffic_per_user_per_month, on=['user_id', 'month'], how='left')\n",
    "merged_data.to_csv('merged_user_data.csv', index=False)\n",
    "\n",
    "display(merged_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "Imagine if we have some customer who did not make calls by used Internet By using left type of merge we will loose data about tis customer Please use how = 'outer' for merges As well we will need to fill in missing values with 0\n",
    "    \n",
    "    merged_data = merged_data.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "      <th>plan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>16</td>\n",
       "      <td>124.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>27</td>\n",
       "      <td>182.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>49</td>\n",
       "      <td>315.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>65</td>\n",
       "      <td>393.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>64</td>\n",
       "      <td>426.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>1498</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>39</td>\n",
       "      <td>339.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23137.69</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>41</td>\n",
       "      <td>346.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12984.76</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>53</td>\n",
       "      <td>385.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19492.43</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>45</td>\n",
       "      <td>308.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16813.83</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2257</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>65</td>\n",
       "      <td>496.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22059.21</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2258 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id    month  call_count  total_minutes  message_count  \\\n",
       "0        1000  2018-12          16          124.0           11.0   \n",
       "1        1001  2018-08          27          182.0           30.0   \n",
       "2        1001  2018-09          49          315.0           44.0   \n",
       "3        1001  2018-10          65          393.0           53.0   \n",
       "4        1001  2018-11          64          426.0           36.0   \n",
       "...       ...      ...         ...            ...            ...   \n",
       "2253     1498  2018-12          39          339.0            NaN   \n",
       "2254     1499  2018-09          41          346.0            NaN   \n",
       "2255     1499  2018-10          53          385.0            NaN   \n",
       "2256     1499  2018-11          45          308.0            NaN   \n",
       "2257     1499  2018-12          65          496.0            NaN   \n",
       "\n",
       "      total_traffic_mb      plan  \n",
       "0              1901.47  ultimate  \n",
       "1              6919.15      surf  \n",
       "2             13314.82      surf  \n",
       "3             22330.49      surf  \n",
       "4             18504.30      surf  \n",
       "...                ...       ...  \n",
       "2253          23137.69      surf  \n",
       "2254          12984.76      surf  \n",
       "2255          19492.43      surf  \n",
       "2256          16813.83      surf  \n",
       "2257          22059.21      surf  \n",
       "\n",
       "[2258 rows x 7 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Add the plan information\n",
    "merged_data = pd.merge(calls_per_user_per_month, minutes_per_user_per_month, on=['user_id', 'month'], how='left')\n",
    "merged_data = pd.merge(merged_data, messages_per_user_per_month, on=['user_id', 'month'], how='left')\n",
    "merged_data = pd.merge(merged_data, traffic_per_user_per_month, on=['user_id', 'month'], how='left')\n",
    "final_merged_data = pd.merge(merged_data, megaline_users[['user_id', 'plan']], on='user_id', how='left')\n",
    "\n",
    "final_merged_data.to_csv('final_merged_user_data.csv', index=False)\n",
    "\n",
    "display(final_merged_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-warning\"> <b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "Great But you repeat half of the code from cell 28 We dont need to repeat the code You can use merge_data that you created in cell 28 and add to it plan information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "      <th>plan</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>...</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>usd_annual_pay</th>\n",
       "      <th>gb_per_month</th>\n",
       "      <th>avg_cost_per_minute</th>\n",
       "      <th>avg_cost_per_gb</th>\n",
       "      <th>avg_cost_per_message</th>\n",
       "      <th>plan_popularity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>16</td>\n",
       "      <td>124.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>840</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.023333</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.07</td>\n",
       "      <td>500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>27</td>\n",
       "      <td>182.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>49</td>\n",
       "      <td>315.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>65</td>\n",
       "      <td>393.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>64</td>\n",
       "      <td>426.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id    month  call_count  total_minutes  message_count  \\\n",
       "0     1000  2018-12          16          124.0           11.0   \n",
       "1     1001  2018-08          27          182.0           30.0   \n",
       "2     1001  2018-09          49          315.0           44.0   \n",
       "3     1001  2018-10          65          393.0           53.0   \n",
       "4     1001  2018-11          64          426.0           36.0   \n",
       "\n",
       "   total_traffic_mb      plan  messages_included  mb_per_month_included  \\\n",
       "0           1901.47  ultimate               1000                  30720   \n",
       "1           6919.15      surf                 50                  15360   \n",
       "2          13314.82      surf                 50                  15360   \n",
       "3          22330.49      surf                 50                  15360   \n",
       "4          18504.30      surf                 50                  15360   \n",
       "\n",
       "   minutes_included  ...  usd_per_gb  usd_per_message  usd_per_minute  \\\n",
       "0              3000  ...           7             0.01            0.01   \n",
       "1               500  ...          10             0.03            0.03   \n",
       "2               500  ...          10             0.03            0.03   \n",
       "3               500  ...          10             0.03            0.03   \n",
       "4               500  ...          10             0.03            0.03   \n",
       "\n",
       "   plan_name usd_annual_pay  gb_per_month  avg_cost_per_minute  \\\n",
       "0   ultimate            840          30.0             0.023333   \n",
       "1       surf            240          15.0             0.040000   \n",
       "2       surf            240          15.0             0.040000   \n",
       "3       surf            240          15.0             0.040000   \n",
       "4       surf            240          15.0             0.040000   \n",
       "\n",
       "   avg_cost_per_gb  avg_cost_per_message  plan_popularity  \n",
       "0         2.333333                  0.07              500  \n",
       "1         1.333333                  0.40              150  \n",
       "2         1.333333                  0.40              150  \n",
       "3         1.333333                  0.40              150  \n",
       "4         1.333333                  0.40              150  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_merged_data = final_merged_data.merge(megaline_plans_df, left_on='plan', right_on='plan_name', how='left')\n",
    "final_merged_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment v4</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "    \n",
    "Great We have all information to calculate monthly revenue from each user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>monthly_revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>70.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>90.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>60.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>1498</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>100.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>70.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>40.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2257</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>90.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2258 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id    month  monthly_revenue\n",
       "0        1000  2018-12            70.00\n",
       "1        1001  2018-08            20.00\n",
       "2        1001  2018-09            20.00\n",
       "3        1001  2018-10            90.09\n",
       "4        1001  2018-11            60.00\n",
       "...       ...      ...              ...\n",
       "2253     1498  2018-12           100.00\n",
       "2254     1499  2018-09            20.00\n",
       "2255     1499  2018-10            70.00\n",
       "2256     1499  2018-11            40.00\n",
       "2257     1499  2018-12            90.00\n",
       "\n",
       "[2258 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the monthly revenue for each user\n",
    "def calculate_revenue(row):\n",
    "    \n",
    "    excess_minutes = max(0, row['total_minutes'] - row['minutes_included'])\n",
    "    calls_revenue = excess_minutes * row['usd_per_minute']\n",
    "    \n",
    "    excess_messages = max(0, row['message_count'] - row['messages_included'])\n",
    "    messages_revenue = excess_messages * row['usd_per_message']\n",
    "    \n",
    "    excess_data_gb = max(0, np.ceil((row['total_traffic_mb'] - row['mb_per_month_included']) / 1024))  \n",
    "    data_revenue = excess_data_gb * row['usd_per_gb']\n",
    "    \n",
    "    monthly_payment = row['usd_monthly_pay']\n",
    "    \n",
    "    total_revenue = monthly_payment + calls_revenue + messages_revenue + data_revenue\n",
    "    return total_revenue\n",
    "\n",
    "final_merged_data['monthly_revenue'] = final_merged_data.apply(calculate_revenue, axis=1)\n",
    "\n",
    "final_merged_data.to_csv('monthly_revenue_per_user.csv', index=False)\n",
    "\n",
    "display(final_merged_data[['user_id', 'month', 'monthly_revenue']])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "Here everything is almost perfect But according to the brief we need to round up monthly number of MB used to nearest number of GB So\n",
    "    \n",
    "    excess_data_gb = max(0, np.ceil((row['total_traffic_mb'] - row['mb_per_month_included']) / 1024))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Study user behaviour"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "      <th>plan</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>...</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>usd_annual_pay</th>\n",
       "      <th>gb_per_month</th>\n",
       "      <th>avg_cost_per_minute</th>\n",
       "      <th>avg_cost_per_gb</th>\n",
       "      <th>avg_cost_per_message</th>\n",
       "      <th>plan_popularity</th>\n",
       "      <th>monthly_revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>16</td>\n",
       "      <td>124.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>840</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.023333</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.07</td>\n",
       "      <td>500</td>\n",
       "      <td>70.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>27</td>\n",
       "      <td>182.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>49</td>\n",
       "      <td>315.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>65</td>\n",
       "      <td>393.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>90.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>64</td>\n",
       "      <td>426.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>60.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id    month  call_count  total_minutes  message_count  \\\n",
       "0     1000  2018-12          16          124.0           11.0   \n",
       "1     1001  2018-08          27          182.0           30.0   \n",
       "2     1001  2018-09          49          315.0           44.0   \n",
       "3     1001  2018-10          65          393.0           53.0   \n",
       "4     1001  2018-11          64          426.0           36.0   \n",
       "\n",
       "   total_traffic_mb      plan  messages_included  mb_per_month_included  \\\n",
       "0           1901.47  ultimate               1000                  30720   \n",
       "1           6919.15      surf                 50                  15360   \n",
       "2          13314.82      surf                 50                  15360   \n",
       "3          22330.49      surf                 50                  15360   \n",
       "4          18504.30      surf                 50                  15360   \n",
       "\n",
       "   minutes_included  ...  usd_per_message  usd_per_minute  plan_name  \\\n",
       "0              3000  ...             0.01            0.01   ultimate   \n",
       "1               500  ...             0.03            0.03       surf   \n",
       "2               500  ...             0.03            0.03       surf   \n",
       "3               500  ...             0.03            0.03       surf   \n",
       "4               500  ...             0.03            0.03       surf   \n",
       "\n",
       "   usd_annual_pay gb_per_month  avg_cost_per_minute  avg_cost_per_gb  \\\n",
       "0             840         30.0             0.023333         2.333333   \n",
       "1             240         15.0             0.040000         1.333333   \n",
       "2             240         15.0             0.040000         1.333333   \n",
       "3             240         15.0             0.040000         1.333333   \n",
       "4             240         15.0             0.040000         1.333333   \n",
       "\n",
       "   avg_cost_per_message  plan_popularity  monthly_revenue  \n",
       "0                  0.07              500            70.00  \n",
       "1                  0.40              150            20.00  \n",
       "2                  0.40              150            20.00  \n",
       "3                  0.40              150            90.09  \n",
       "4                  0.40              150            60.00  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_merged_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2258 entries, 0 to 2257\n",
      "Data columns (total 22 columns):\n",
      " #   Column                 Non-Null Count  Dtype    \n",
      "---  ------                 --------------  -----    \n",
      " 0   user_id                2258 non-null   int64    \n",
      " 1   month                  2258 non-null   period[M]\n",
      " 2   call_count             2258 non-null   int64    \n",
      " 3   total_minutes          2258 non-null   float64  \n",
      " 4   message_count          1773 non-null   float64  \n",
      " 5   total_traffic_mb       2243 non-null   float64  \n",
      " 6   plan                   2258 non-null   object   \n",
      " 7   messages_included      2258 non-null   int64    \n",
      " 8   mb_per_month_included  2258 non-null   int64    \n",
      " 9   minutes_included       2258 non-null   int64    \n",
      " 10  usd_monthly_pay        2258 non-null   int64    \n",
      " 11  usd_per_gb             2258 non-null   int64    \n",
      " 12  usd_per_message        2258 non-null   float64  \n",
      " 13  usd_per_minute         2258 non-null   float64  \n",
      " 14  plan_name              2258 non-null   object   \n",
      " 15  usd_annual_pay         2258 non-null   int64    \n",
      " 16  gb_per_month           2258 non-null   float64  \n",
      " 17  avg_cost_per_minute    2258 non-null   float64  \n",
      " 18  avg_cost_per_gb        2258 non-null   float64  \n",
      " 19  avg_cost_per_message   2258 non-null   float64  \n",
      " 20  plan_popularity        2258 non-null   int64    \n",
      " 21  monthly_revenue        2258 non-null   float64  \n",
      "dtypes: float64(10), int64(9), object(2), period[M](1)\n",
      "memory usage: 405.7+ KB\n"
     ]
    }
   ],
   "source": [
    "final_merged_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare average duration of calls per each plan per each distinct month. Plot a bar plat to visualize it.\n",
    "average_call_duration = (\n",
    "    final_merged_data.groupby(['plan', 'month'])['total_minutes']\n",
    "    .mean()\n",
    "    .reset_index()\n",
    ")\n",
    "\n",
    "average_call_duration.rename(\n",
    "    columns={'total_minutes': 'avg_call_duration'}, inplace=True\n",
    ")\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "for plan in average_call_duration['plan'].unique():\n",
    "    plan_data = average_call_duration[average_call_duration['plan'] == plan]\n",
    "    plt.bar(\n",
    "        plan_data['month'].astype(str),  \n",
    "        plan_data['avg_call_duration'],\n",
    "        label=plan\n",
    "    )\n",
    "\n",
    "plt.title('Average Call Duration per Plan per Month', fontsize=16)\n",
    "plt.xlabel('Month', fontsize=12)\n",
    "plt.ylabel('Average Call Duration (Minutes)', fontsize=12)\n",
    "plt.legend(title='Plan', fontsize=10)\n",
    "plt.xticks(rotation=45)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare the number of minutes users of each plan require each month. Plot a histogram.\n",
    "surf_plan_minutes = final_merged_data[final_merged_data['plan'] == 'surf']['total_minutes']\n",
    "ultimate_plan_minutes = final_merged_data[final_merged_data['plan'] == 'ultimate']['total_minutes']\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(\n",
    "    surf_plan_minutes, bins=10, alpha=0.7, label='Surf Plan', color='blue', edgecolor='black'\n",
    ")\n",
    "plt.hist(\n",
    "    ultimate_plan_minutes, bins=10, alpha=0.7, label='Ultimate Plan', color='orange', edgecolor='black'\n",
    ")\n",
    "\n",
    "plt.title('Distribution of Total Minutes Used by Plan', fontsize=16)\n",
    "plt.xlabel('Minutes Used', fontsize=12)\n",
    "plt.ylabel('Frequency', fontsize=12)\n",
    "plt.legend(title='Plan', fontsize=10)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Call Duration Statistics by Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>plan</th>\n",
       "      <th>mean_duration</th>\n",
       "      <th>variance_duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>surf</td>\n",
       "      <td>436.519741</td>\n",
       "      <td>52571.063243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ultimate</td>\n",
       "      <td>434.676017</td>\n",
       "      <td>56573.632247</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       plan  mean_duration  variance_duration\n",
       "0      surf     436.519741       52571.063243\n",
       "1  ultimate     434.676017       56573.632247"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the mean and the variance of the monthly call duration\n",
    "call_duration_stats = (\n",
    "    final_merged_data.groupby('plan')['total_minutes']\n",
    "    .agg(mean_duration='mean', variance_duration='var')\n",
    "    .reset_index()\n",
    ")\n",
    "\n",
    "print(\"Call Duration Statistics by Plan:\")\n",
    "display(call_duration_stats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a boxplot to visualize the distribution of the monthly call duration\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.boxplot(data=final_merged_data, x='plan', y='total_minutes', palette='Set2')\n",
    "\n",
    "plt.title('Distribution of Monthly Call Duration by Plan', fontsize=16)\n",
    "plt.xlabel('Plan', fontsize=12)\n",
    "plt.ylabel('Total Minutes Used', fontsize=12)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the above graphs it is very obvious that customers on the Surf plan make longer calls and make more calls then those that are on the Ultimate Plan. The original plans for the Surf Plan gives customers 500 minutes, while the Ulitimate Plan gives 3000 minutes. The Customers in the Ultimate plan are using less then 1/4th of the minutes where Surf Plan customers are using almost all of their minutes!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment v4</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "    \n",
    "Very deep analysis of calls with all necessary calculations, amazing visulizations and right conclusion!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Messages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Descriptive Statistics for Messages by Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>plan</th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>variance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>surf</td>\n",
       "      <td>39.980737</td>\n",
       "      <td>32.0</td>\n",
       "      <td>1101.537768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ultimate</td>\n",
       "      <td>46.455959</td>\n",
       "      <td>41.0</td>\n",
       "      <td>1084.393818</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       plan       mean  median     variance\n",
       "0      surf  39.980737    32.0  1101.537768\n",
       "1  ultimate  46.455959    41.0  1084.393818"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare the number of messages users of each plan tend to send each month\n",
    "message_stats = final_merged_data.groupby('plan')['message_count'].agg(\n",
    "    mean='mean', median='median', variance='var'\n",
    ").reset_index()\n",
    "\n",
    "print(\"Descriptive Statistics for Messages by Plan:\")\n",
    "display(message_stats)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.boxplot(data=final_merged_data, x='plan', y='message_count', palette='Set2')\n",
    "\n",
    "plt.title('Distribution of Number of Messages Sent by Plan', fontsize=16)\n",
    "plt.xlabel('Plan', fontsize=12)\n",
    "plt.ylabel('Number of Messages', fontsize=12)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "sns.barplot(data=message_stats, x='plan', y='mean', palette='Set2')\n",
    "\n",
    "plt.title('Average Number of Messages Sent by Plan', fontsize=16)\n",
    "plt.xlabel('Plan', fontsize=12)\n",
    "plt.ylabel('Average Number of Messages', fontsize=12)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Descriptive Statistics for Internet Traffic by Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>plan</th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>variance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>surf</td>\n",
       "      <td>16667.548229</td>\n",
       "      <td>16928.99</td>\n",
       "      <td>5.949350e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ultimate</td>\n",
       "      <td>17278.003731</td>\n",
       "      <td>16866.45</td>\n",
       "      <td>6.021225e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       plan          mean    median      variance\n",
       "0      surf  16667.548229  16928.99  5.949350e+07\n",
       "1  ultimate  17278.003731  16866.45  6.021225e+07"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare the amount of internet traffic consumed by users per plan\n",
    "traffic_stats = final_merged_data.groupby('plan')['total_traffic_mb'].agg(\n",
    "    mean='mean', median='median', variance='var'\n",
    ").reset_index()\n",
    "\n",
    "print(\"Descriptive Statistics for Internet Traffic by Plan:\")\n",
    "display(traffic_stats)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above data that we have delved into, we can see that when it comes to messaging, the Ultimate customers are sending more then the Surf customers. That being said it is also good to note that in terms of messages included in either plan the Surf customers are sending 80% of their total alotment of messages where the Ultimate customers are sending a mere 4.5% in comparison. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "You performed great analysis of messages Please add the conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Internet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "sns.boxplot(data=final_merged_data, x='plan', y='total_traffic_mb', palette='Set2')\n",
    "\n",
    "plt.title('Distribution of Internet Traffic Consumed by Plan', fontsize=16)\n",
    "plt.xlabel('Plan', fontsize=12)\n",
    "plt.ylabel('Total Internet Traffic (MB)', fontsize=12)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 5))\n",
    "sns.barplot(data=traffic_stats, x='plan', y='mean', palette='Set2')\n",
    "\n",
    "plt.title('Average Internet Traffic Consumed by Plan', fontsize=16)\n",
    "plt.xlabel('Plan', fontsize=12)\n",
    "plt.ylabel('Average Internet Traffic (MB)', fontsize=12)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "According to the data above, again the Surf Plan users are almost maxing out what their plans allow. In messages sent they average 40/50 messages allowed and on the MB used they are past thier limits using an average of 16.25GB/15GB. The Ultimate Plan customers are averaging way less then their 1000 messages aloted, and just over half of the GB usage allowed in their plans, (17GB/30GB)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "Please calculate mean and variance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\"> <b>Student answer.</b> <a class=\"tocSkip\"></a>\n",
    "</div> I think I have already calculated this. Maybe I just put it in the wrong area? the calculation for mean and variance of the Internet was performed in box 39, the box in 1.13.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Descriptive Statistics for Monthly Revenue by Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>plan</th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>variance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>surf</td>\n",
       "      <td>60.125515</td>\n",
       "      <td>40.42</td>\n",
       "      <td>2865.818321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ultimate</td>\n",
       "      <td>72.277700</td>\n",
       "      <td>70.00</td>\n",
       "      <td>128.866595</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       plan       mean  median     variance\n",
       "0      surf  60.125515   40.42  2865.818321\n",
       "1  ultimate  72.277700   70.00   128.866595"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "revenue_stats = final_merged_data.groupby('plan')['monthly_revenue'].agg(\n",
    "    mean='mean', median='median', variance='var'\n",
    ").reset_index()\n",
    "\n",
    "print(\"Descriptive Statistics for Monthly Revenue by Plan:\")\n",
    "display(revenue_stats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "sns.boxplot(data=final_merged_data, x='plan', y='monthly_revenue', palette='Set2')\n",
    "\n",
    "plt.title('Distribution of Monthly Revenue by Plan', fontsize=16)\n",
    "plt.xlabel('Plan', fontsize=12)\n",
    "plt.ylabel('Monthly Revenue (USD)', fontsize=12)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 5))\n",
    "sns.barplot(data=revenue_stats, x='plan', y='mean', palette='Set2')\n",
    "\n",
    "plt.title('Average Monthly Revenue by Plan', fontsize=16)\n",
    "plt.xlabel('Plan', fontsize=12)\n",
    "plt.ylabel('Average Monthly Revenue (USD)', fontsize=12)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "According to the data tables above, our Ultimate plan customer revenue is roughly $20 more then our Surf Plan brings in for us. From the previous data that I have seen above our Surf customers are using almost everything that their plans allow where as Ultimate customers barley use half of what they are paying for. Our Ultimate Plan currently looks like where we need to be putting our advertising dollars. That being said, I will draw a final conclusion once all of my analyzing has been done."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "Please calculate mean and variance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\"> <b>Student answer.</b> <a class=\"tocSkip\"></a>\n",
    "</div>So looking over my code, I calculated the mean and variance in the first code box in 1.14...Is this not the case? If so I am more then happy to do so again."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test statistical hypotheses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'T-statistic: 8.517344212487158'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'P-value: 3.363644868810144e-17'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We reject the null hypothesis: The average revenue from users of the Ultimate and Surf plans differs.\n"
     ]
    }
   ],
   "source": [
    "# Test the hypotheses\n",
    "ultimate_revenue = final_merged_data[final_merged_data['plan'] == 'ultimate']['monthly_revenue']\n",
    "surf_revenue = final_merged_data[final_merged_data['plan'] == 'surf']['monthly_revenue']\n",
    "\n",
    "t_stat, p_value = ttest_ind(ultimate_revenue, surf_revenue, equal_var=False)  # Welch's t-test\n",
    "\n",
    "alpha = 0.05\n",
    "display(f\"T-statistic: {t_stat}\")\n",
    "display(f\"P-value: {p_value}\")\n",
    "\n",
    "if p_value < alpha:\n",
    "    print(\"We reject the null hypothesis: The average revenue from users of the Ultimate and Surf plans differs.\")\n",
    "else:\n",
    "    print(\"We fail to reject the null hypothesis: No significant difference in average revenue between the two plans.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>account_age_months</th>\n",
       "      <th>churn_status</th>\n",
       "      <th>plan_duration_months</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>total_spend</th>\n",
       "      <th>location_group</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaT</td>\n",
       "      <td>73.333333</td>\n",
       "      <td>0</td>\n",
       "      <td>73.333333</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>70</td>\n",
       "      <td>5133.333333</td>\n",
       "      <td>Urban</td>\n",
       "      <td>GA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>77.766667</td>\n",
       "      <td>0</td>\n",
       "      <td>77.766667</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1555.333333</td>\n",
       "      <td>Urban</td>\n",
       "      <td>WA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV MSA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>75.466667</td>\n",
       "      <td>0</td>\n",
       "      <td>75.466667</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1509.333333</td>\n",
       "      <td>Other</td>\n",
       "      <td>NV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK MSA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>84.333333</td>\n",
       "      <td>0</td>\n",
       "      <td>84.333333</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1686.666667</td>\n",
       "      <td>Other</td>\n",
       "      <td>OK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>80.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>80.500000</td>\n",
       "      <td>surf</td>\n",
       "      <td>20</td>\n",
       "      <td>1610.000000</td>\n",
       "      <td>Urban</td>\n",
       "      <td>WA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id first_name  last_name  age                                   city  \\\n",
       "0     1000   Anamaria      Bauer   45  Atlanta-Sandy Springs-Roswell, GA MSA   \n",
       "1     1001     Mickey  Wilkerson   28        Seattle-Tacoma-Bellevue, WA MSA   \n",
       "2     1002     Carlee    Hoffman   36   Las Vegas-Henderson-Paradise, NV MSA   \n",
       "3     1003   Reynaldo    Jenkins   52                          Tulsa, OK MSA   \n",
       "4     1004    Leonila   Thompson   40        Seattle-Tacoma-Bellevue, WA MSA   \n",
       "\n",
       "    reg_date      plan churn_date  account_age_months  churn_status  \\\n",
       "0 2018-12-24  ultimate        NaT           73.333333             0   \n",
       "1 2018-08-13      surf        NaT           77.766667             0   \n",
       "2 2018-10-21      surf        NaT           75.466667             0   \n",
       "3 2018-01-28      surf        NaT           84.333333             0   \n",
       "4 2018-05-23      surf        NaT           80.500000             0   \n",
       "\n",
       "   plan_duration_months plan_name  usd_monthly_pay  total_spend  \\\n",
       "0             73.333333  ultimate               70  5133.333333   \n",
       "1             77.766667      surf               20  1555.333333   \n",
       "2             75.466667      surf               20  1509.333333   \n",
       "3             84.333333      surf               20  1686.666667   \n",
       "4             80.500000      surf               20  1610.000000   \n",
       "\n",
       "  location_group state  \n",
       "0          Urban    GA  \n",
       "1          Urban    WA  \n",
       "2          Other    NV  \n",
       "3          Other    OK  \n",
       "4          Urban    WA  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use apply funtion to extract state abbreviation \n",
    "def extract_state(row):\n",
    "    state = \"\"\n",
    "    city_str = row['city']\n",
    "    state = city_str.split(\",\")[-1]\n",
    "    state = state.split(\" \")[1]\n",
    "    \n",
    "    return state\n",
    "\n",
    "\n",
    "megaline_users['state'] = megaline_users.apply(extract_state, axis=1)\n",
    "megaline_users.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['GA', 'WA', 'NV', 'OK', 'TX', 'CA', 'MI', 'FL', 'OH', 'IL-IN-WI',\n",
       "       'TN', 'NY-NJ-PA', 'PA', 'DC-VA-MD-WV', 'IN', 'NE-IA',\n",
       "       'PA-NJ-DE-MD', 'AL', 'NC-SC', 'CO', 'NM', 'MA-NH', 'AZ', 'OR-WA',\n",
       "       'OH-KY-IN', 'SC', 'NY', 'TN-MS-AR', 'KY-IN', 'RI-MA', 'UT', 'HI',\n",
       "       'CT', 'LA', 'VA-NC', 'MD', 'WI', 'VA', 'MO-IL', 'MN-WI', 'MO-KS',\n",
       "       'NC'], dtype=object)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "megaline_users['state'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "      <th>plan</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>...</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>usd_annual_pay</th>\n",
       "      <th>gb_per_month</th>\n",
       "      <th>avg_cost_per_minute</th>\n",
       "      <th>avg_cost_per_gb</th>\n",
       "      <th>avg_cost_per_message</th>\n",
       "      <th>plan_popularity</th>\n",
       "      <th>monthly_revenue</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>16</td>\n",
       "      <td>124.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>840</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.023333</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>0.07</td>\n",
       "      <td>500</td>\n",
       "      <td>70.00</td>\n",
       "      <td>GA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>27</td>\n",
       "      <td>182.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>20.00</td>\n",
       "      <td>WA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>49</td>\n",
       "      <td>315.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>20.00</td>\n",
       "      <td>WA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>65</td>\n",
       "      <td>393.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>90.09</td>\n",
       "      <td>WA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>64</td>\n",
       "      <td>426.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>60.00</td>\n",
       "      <td>WA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>1498</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>39</td>\n",
       "      <td>339.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23137.69</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>100.00</td>\n",
       "      <td>NY-NJ-PA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>41</td>\n",
       "      <td>346.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12984.76</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>20.00</td>\n",
       "      <td>FL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>53</td>\n",
       "      <td>385.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19492.43</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>70.00</td>\n",
       "      <td>FL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>45</td>\n",
       "      <td>308.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16813.83</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>40.00</td>\n",
       "      <td>FL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2257</th>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>65</td>\n",
       "      <td>496.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22059.21</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>240</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.40</td>\n",
       "      <td>150</td>\n",
       "      <td>90.00</td>\n",
       "      <td>FL</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2258 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id    month  call_count  total_minutes  message_count  \\\n",
       "0        1000  2018-12          16          124.0           11.0   \n",
       "1        1001  2018-08          27          182.0           30.0   \n",
       "2        1001  2018-09          49          315.0           44.0   \n",
       "3        1001  2018-10          65          393.0           53.0   \n",
       "4        1001  2018-11          64          426.0           36.0   \n",
       "...       ...      ...         ...            ...            ...   \n",
       "2253     1498  2018-12          39          339.0            NaN   \n",
       "2254     1499  2018-09          41          346.0            NaN   \n",
       "2255     1499  2018-10          53          385.0            NaN   \n",
       "2256     1499  2018-11          45          308.0            NaN   \n",
       "2257     1499  2018-12          65          496.0            NaN   \n",
       "\n",
       "      total_traffic_mb      plan  messages_included  mb_per_month_included  \\\n",
       "0              1901.47  ultimate               1000                  30720   \n",
       "1              6919.15      surf                 50                  15360   \n",
       "2             13314.82      surf                 50                  15360   \n",
       "3             22330.49      surf                 50                  15360   \n",
       "4             18504.30      surf                 50                  15360   \n",
       "...                ...       ...                ...                    ...   \n",
       "2253          23137.69      surf                 50                  15360   \n",
       "2254          12984.76      surf                 50                  15360   \n",
       "2255          19492.43      surf                 50                  15360   \n",
       "2256          16813.83      surf                 50                  15360   \n",
       "2257          22059.21      surf                 50                  15360   \n",
       "\n",
       "      minutes_included  ...  usd_per_minute  plan_name  usd_annual_pay  \\\n",
       "0                 3000  ...            0.01   ultimate             840   \n",
       "1                  500  ...            0.03       surf             240   \n",
       "2                  500  ...            0.03       surf             240   \n",
       "3                  500  ...            0.03       surf             240   \n",
       "4                  500  ...            0.03       surf             240   \n",
       "...                ...  ...             ...        ...             ...   \n",
       "2253               500  ...            0.03       surf             240   \n",
       "2254               500  ...            0.03       surf             240   \n",
       "2255               500  ...            0.03       surf             240   \n",
       "2256               500  ...            0.03       surf             240   \n",
       "2257               500  ...            0.03       surf             240   \n",
       "\n",
       "      gb_per_month avg_cost_per_minute  avg_cost_per_gb  avg_cost_per_message  \\\n",
       "0             30.0            0.023333         2.333333                  0.07   \n",
       "1             15.0            0.040000         1.333333                  0.40   \n",
       "2             15.0            0.040000         1.333333                  0.40   \n",
       "3             15.0            0.040000         1.333333                  0.40   \n",
       "4             15.0            0.040000         1.333333                  0.40   \n",
       "...            ...                 ...              ...                   ...   \n",
       "2253          15.0            0.040000         1.333333                  0.40   \n",
       "2254          15.0            0.040000         1.333333                  0.40   \n",
       "2255          15.0            0.040000         1.333333                  0.40   \n",
       "2256          15.0            0.040000         1.333333                  0.40   \n",
       "2257          15.0            0.040000         1.333333                  0.40   \n",
       "\n",
       "      plan_popularity  monthly_revenue     state  \n",
       "0                 500            70.00        GA  \n",
       "1                 150            20.00        WA  \n",
       "2                 150            20.00        WA  \n",
       "3                 150            90.09        WA  \n",
       "4                 150            60.00        WA  \n",
       "...               ...              ...       ...  \n",
       "2253              150           100.00  NY-NJ-PA  \n",
       "2254              150            20.00        FL  \n",
       "2255              150            70.00        FL  \n",
       "2256              150            40.00        FL  \n",
       "2257              150            90.00        FL  \n",
       "\n",
       "[2258 rows x 23 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "NY_NJ_states = ['NY-NJ-PA', 'PA-NJ-DE-MD', 'NY']\n",
    "final_merged_data = pd.merge(final_merged_data, megaline_users[['user_id', 'state']], on='user_id', how='left')\n",
    "display(final_merged_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T-statistic: -1.8373474939385206\n",
      "P-value: 0.06655333907084257\n",
      "We fail to reject the null hypothesis: No significant difference in average revenue between users in the NY-NJ area and other regions.\n"
     ]
    }
   ],
   "source": [
    "# Test the hypotheses\n",
    "ny_nj_revenue = final_merged_data[final_merged_data['state'].isin(NY_NJ_states)]['monthly_revenue']\n",
    "other_regions_revenue = final_merged_data[~final_merged_data['state'].isin(NY_NJ_states)]['monthly_revenue']\n",
    "\n",
    "t_stat, p_value = ttest_ind(ny_nj_revenue, other_regions_revenue, equal_var=False)  # Welch's t-test\n",
    "\n",
    "alpha = 0.05\n",
    "print(f\"T-statistic: {t_stat}\")\n",
    "print(f\"P-value: {p_value}\")\n",
    "\n",
    "if p_value < alpha:\n",
    "    print(\"We reject the null hypothesis: The average revenue from users in the NY-NJ area differs from that of users in other regions.\")\n",
    "else:\n",
    "    print(\"We fail to reject the null hypothesis: No significant difference in average revenue between users in the NY-NJ area and other regions.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> <b>Reviewer's comment v4</b> <a\n",
    "class=\"tocSkip\"></a>\n",
    "    \n",
    "Perfect code for hypotheses testing Bravo!!!!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## General conclusion\n",
    "\n",
    "This project was to determine where we as a company should be putting out advertising dollars to help us increase revenue. Honestly after looking through all the data that is above, especially section 1.132 to 1.14, It is of my opinion that 1, that the customers in the ultimate plan are not using all of the base benefits of their plans (i.e. messages and internet data). 2, customers on the surf plan are using roughly 90% of everything in their plan lowering our revenue. and 3, it appers to me that the customers in the Ultimate Plan are paying for more then double what they actually need, however, from the data side of things are happy paying what they are in accordance with what they get. Otherwise, they would change plans and move to the Surf Plan. My recommendation would be that we push advertising dollars to the Ultimate Plan as first, there is double to profit to be made there, (see section 1.14, second graph) and secondly, the customer doesn't use all of the alloted minutes, messages, or internet data provided them raising our monthly revenue and year end profits. That being said, from section 1.15 in my analytics, there isnt enough information to prove that there is a great deal of difference in what people from the selected region (New York / New Jersey area) pay any significant more then those say in Utah or Idaho. That being said, I still stand by my analysis that the advertisment dollars would best be spent on the Ultimate plan due to the fact that those customers don't use all of the included items, and our per customer revenue is greater with these customers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Reviewer's comment v4</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "Please add to the conclusion results of hypotheses testing"
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 828,
    "start_time": "2021-11-16T09:21:11.304Z"
   },
   {
    "duration": 893,
    "start_time": "2021-11-16T09:21:17.728Z"
   },
   {
    "duration": 1150,
    "start_time": "2021-11-16T09:21:29.568Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:24:14.495Z"
   },
   {
    "duration": 120,
    "start_time": "2021-11-16T09:24:46.630Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:28:27.882Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:29:54.281Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:30:45.936Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:31:06.300Z"
   },
   {
    "duration": 113,
    "start_time": "2021-11-16T09:31:37.208Z"
   },
   {
    "duration": 143,
    "start_time": "2021-11-16T09:31:48.656Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-16T09:31:55.678Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:32:08.535Z"
   },
   {
    "duration": 111,
    "start_time": "2021-11-16T09:32:10.120Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:32:15.732Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:32:29.423Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:03:03.074Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:10:01.288Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:10:46.923Z"
   },
   {
    "duration": 121,
    "start_time": "2021-11-16T10:37:46.494Z"
   },
   {
    "duration": 125,
    "start_time": "2021-11-16T10:38:20.632Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T10:46:53.001Z"
   },
   {
    "duration": 110,
    "start_time": "2021-11-16T10:48:25.775Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:50:18.720Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T10:50:37.649Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-16T10:50:51.884Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:51:56.237Z"
   },
   {
    "duration": 101,
    "start_time": "2021-11-16T10:53:13.791Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:55:59.186Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:10.751Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.038Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.174Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T10:56:49.414Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.680Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:50.370Z"
   },
   {
    "duration": 114,
    "start_time": "2021-11-16T10:59:34.518Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:01:41.201Z"
   },
   {
    "duration": 116,
    "start_time": "2021-11-16T11:01:48.754Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:16.685Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:19.479Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:47.067Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:49.353Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:03:07.835Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:03:07.953Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T11:07:52.072Z"
   },
   {
    "duration": 187,
    "start_time": "2021-11-16T11:09:23.468Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:10:01.455Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:05.069Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:10:13.376Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:14.434Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:22.853Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:27:29.279Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:29:08.919Z"
   },
   {
    "duration": 118,
    "start_time": "2021-11-16T11:29:46.703Z"
   },
   {
    "duration": 437,
    "start_time": "2021-11-16T11:36:02.181Z"
   },
   {
    "duration": 157,
    "start_time": "2021-11-16T11:36:14.388Z"
   },
   {
    "duration": 207,
    "start_time": "2021-11-16T11:47:15.898Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:53:52.092Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:53:52.236Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:59:12.005Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T12:00:33.446Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T12:02:14.453Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T12:02:39.512Z"
   },
   {
    "duration": 106,
    "start_time": "2021-11-16T12:03:03.460Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:37:21.139Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:37:22.229Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:38:38.806Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:38:41.958Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:43:46.551Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:58:21.835Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:59:21.872Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:59:45.352Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:59:49.646Z"
   },
   {
    "duration": 159,
    "start_time": "2021-11-17T21:02:26.949Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:03:53.461Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:03:53.694Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:05:28.145Z"
   },
   {
    "duration": 116,
    "start_time": "2021-11-17T21:05:57.787Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:06:37.993Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:06:38.261Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:11:54.358Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:12:43.846Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:13:08.773Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:14:44.441Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:42.059Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:15:51.995Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:53.923Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:55.282Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:16:28.492Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:16:32.603Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:17:06.941Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-17T21:18:05.733Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:21:35.255Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:21:37.804Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:23:06.071Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:23:24.799Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:23:32.591Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-17T21:28:31.559Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:28:45.448Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:17.303Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:29.617Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:32.681Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:11.474Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:14.791Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:53.943Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:56.165Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:37:16.590Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:37:22.702Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:38:03.479Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:08.601Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:12.928Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:48.896Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-17T21:38:49.171Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:39:57.889Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:39:58.057Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:41:20.108Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:41:20.629Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:42:49.136Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:43:15.137Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:43:16.766Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:43:31.711Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:43:36.312Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:08.825Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:10.119Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:13.748Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:45:22.219Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:45:33.412Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-17T21:46:01.885Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:46:03.628Z"
   },
   {
    "duration": 107,
    "start_time": "2021-11-17T21:47:32.512Z"
   },
   {
    "duration": 103,
    "start_time": "2021-11-17T21:50:36.243Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:28:31.440Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:29:00.168Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:31:27.008Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-18T06:35:34.288Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-18T06:38:04.527Z"
   },
   {
    "duration": 2747,
    "start_time": "2025-01-19T05:50:39.900Z"
   },
   {
    "duration": 185,
    "start_time": "2025-01-19T05:51:12.231Z"
   },
   {
    "duration": 786,
    "start_time": "2025-01-19T06:04:04.945Z"
   },
   {
    "duration": 182,
    "start_time": "2025-01-19T06:04:05.734Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:05.918Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-19T06:04:05.923Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-19T06:04:05.930Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:05.945Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T06:04:05.948Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:05.953Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:05.957Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:05.963Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:05.967Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:05.971Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:05.975Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T06:04:05.978Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:05.983Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:05.986Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:06.043Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:06.047Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:06.051Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:06.055Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:06.059Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:06.063Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T06:04:06.066Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:06.077Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:04:06.081Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T06:04:06.084Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T06:04:06.088Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-19T06:04:06.095Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T06:08:20.108Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T06:08:34.706Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T06:10:57.980Z"
   },
   {
    "duration": 776,
    "start_time": "2025-01-19T06:16:47.112Z"
   },
   {
    "duration": 189,
    "start_time": "2025-01-19T06:16:47.890Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T06:16:48.081Z"
   },
   {
    "duration": 490,
    "start_time": "2025-01-19T06:16:48.095Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-19T06:16:48.587Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.589Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.590Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.591Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.592Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.593Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.594Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.595Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.596Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.597Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.598Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.599Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.600Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.601Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.602Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.603Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.604Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.604Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.605Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.606Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.609Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.610Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.643Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:16:48.643Z"
   },
   {
    "duration": 27,
    "start_time": "2025-01-19T06:17:22.252Z"
   },
   {
    "duration": 795,
    "start_time": "2025-01-19T06:17:30.019Z"
   },
   {
    "duration": 180,
    "start_time": "2025-01-19T06:17:30.816Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T06:17:30.998Z"
   },
   {
    "duration": 487,
    "start_time": "2025-01-19T06:17:31.011Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.501Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.502Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.503Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.504Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.505Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.507Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.508Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.509Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.511Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.512Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.514Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.515Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.516Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.542Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.543Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.544Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.544Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.546Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.547Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.548Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.549Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.550Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.551Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T06:17:31.552Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T06:18:15.526Z"
   },
   {
    "duration": 809,
    "start_time": "2025-01-19T06:30:35.791Z"
   },
   {
    "duration": 183,
    "start_time": "2025-01-19T06:30:36.602Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T06:30:36.787Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T06:30:36.799Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.812Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.844Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.847Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.851Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.855Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.859Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.863Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T06:30:36.866Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T06:30:36.870Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.877Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T06:30:36.880Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.885Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.888Z"
   },
   {
    "duration": 52,
    "start_time": "2025-01-19T06:30:36.892Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.946Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.950Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.954Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T06:30:36.957Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T06:30:36.961Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T06:30:36.965Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.969Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T06:30:36.972Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.977Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T06:30:36.981Z"
   },
   {
    "duration": 36,
    "start_time": "2025-01-19T06:34:52.608Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-19T06:35:36.210Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T07:08:23.990Z"
   },
   {
    "duration": 2562,
    "start_time": "2025-01-19T07:08:34.508Z"
   },
   {
    "duration": 247,
    "start_time": "2025-01-19T07:08:37.072Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T07:08:37.321Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T07:08:37.334Z"
   },
   {
    "duration": 33,
    "start_time": "2025-01-19T07:08:37.345Z"
   },
   {
    "duration": 44,
    "start_time": "2025-01-19T07:08:37.380Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.426Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.428Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-19T07:08:37.429Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.431Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.432Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.433Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.434Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.435Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.436Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.437Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.441Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.442Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.443Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.444Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.446Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.447Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.449Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.450Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.452Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.454Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.455Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.457Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.458Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T07:08:37.459Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-19T07:08:44.784Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-19T07:08:54.440Z"
   },
   {
    "duration": 821,
    "start_time": "2025-01-19T07:09:34.495Z"
   },
   {
    "duration": 185,
    "start_time": "2025-01-19T07:09:35.318Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T07:09:35.504Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T07:09:35.530Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-19T07:09:35.541Z"
   },
   {
    "duration": 50,
    "start_time": "2025-01-19T07:09:35.575Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.626Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.630Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.634Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:09:35.641Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:09:35.645Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-19T07:09:35.649Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.654Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-19T07:09:35.658Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:09:35.666Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-19T07:09:35.670Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:09:35.675Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:09:35.679Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.724Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:09:35.729Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.733Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.737Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.741Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:09:35.746Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.750Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.754Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.758Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-19T07:09:35.765Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:09:35.768Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-19T07:09:35.772Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T07:10:49.324Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T07:11:37.318Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T07:11:44.638Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T07:12:02.221Z"
   },
   {
    "duration": 490,
    "start_time": "2025-01-19T07:12:39.699Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-19T07:12:47.521Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T07:13:53.445Z"
   },
   {
    "duration": 424,
    "start_time": "2025-01-19T07:17:54.889Z"
   },
   {
    "duration": 791,
    "start_time": "2025-01-19T07:18:08.990Z"
   },
   {
    "duration": 184,
    "start_time": "2025-01-19T07:18:09.783Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T07:18:09.969Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T07:18:09.983Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-19T07:18:09.995Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-19T07:18:10.055Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T07:18:10.070Z"
   },
   {
    "duration": 43,
    "start_time": "2025-01-19T07:18:10.083Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-19T07:18:10.128Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:18:10.150Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:18:10.153Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:18:10.158Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:18:10.162Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:18:10.166Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:18:10.170Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:18:10.175Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:18:10.224Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:18:10.228Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:18:10.232Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:18:10.236Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:18:10.241Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:18:10.245Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:18:10.249Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:18:10.254Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:18:10.258Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:18:10.263Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:18:10.267Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:18:10.273Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:18:10.324Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:18:10.328Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-19T07:18:10.333Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-19T07:20:28.250Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T07:22:10.164Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T07:22:56.068Z"
   },
   {
    "duration": 861,
    "start_time": "2025-01-19T07:23:36.349Z"
   },
   {
    "duration": 187,
    "start_time": "2025-01-19T07:23:37.212Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T07:23:37.400Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T07:23:37.427Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-19T07:23:37.439Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-19T07:23:37.473Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-19T07:23:37.529Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T07:23:37.544Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-19T07:23:37.554Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-19T07:23:37.576Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T07:23:37.629Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T07:23:37.643Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:23:37.653Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.657Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-19T07:23:37.661Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.666Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.670Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.674Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-19T07:23:37.678Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.684Z"
   },
   {
    "duration": 38,
    "start_time": "2025-01-19T07:23:37.688Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.728Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.733Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-19T07:23:37.737Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:23:37.744Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.748Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.752Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.758Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.762Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:23:37.767Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:23:37.771Z"
   },
   {
    "duration": 49,
    "start_time": "2025-01-19T07:23:37.775Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T07:24:10.404Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-19T07:27:43.707Z"
   },
   {
    "duration": 27,
    "start_time": "2025-01-19T07:30:11.220Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T07:31:37.987Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T07:32:27.058Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T07:34:10.299Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T07:35:38.690Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T07:37:15.713Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T07:38:34.010Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T07:38:39.332Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-19T07:44:19.351Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T07:45:39.356Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T07:51:07.037Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T07:51:18.611Z"
   },
   {
    "duration": 45,
    "start_time": "2025-01-19T07:52:15.286Z"
   },
   {
    "duration": 827,
    "start_time": "2025-01-19T07:52:24.274Z"
   },
   {
    "duration": 188,
    "start_time": "2025-01-19T07:52:25.103Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T07:52:25.293Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T07:52:25.308Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-19T07:52:25.335Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T07:52:25.369Z"
   },
   {
    "duration": 47,
    "start_time": "2025-01-19T07:52:25.383Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T07:52:25.432Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-19T07:52:25.444Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-19T07:52:25.465Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-19T07:52:25.489Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T07:52:25.528Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-19T07:52:25.538Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T07:52:25.559Z"
   },
   {
    "duration": 45,
    "start_time": "2025-01-19T07:52:25.587Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T07:52:25.634Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T07:52:25.644Z"
   },
   {
    "duration": 27,
    "start_time": "2025-01-19T07:52:25.664Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T07:52:25.725Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T07:52:25.739Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T07:52:25.750Z"
   },
   {
    "duration": 55,
    "start_time": "2025-01-19T07:52:25.770Z"
   },
   {
    "duration": 34,
    "start_time": "2025-01-19T07:52:25.827Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:52:25.863Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:52:25.867Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:52:25.871Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:52:25.876Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:52:25.882Z"
   },
   {
    "duration": 39,
    "start_time": "2025-01-19T07:52:25.885Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:52:25.925Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:52:25.929Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:52:25.933Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:52:25.937Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:52:25.941Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T07:52:25.946Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:52:25.949Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:52:25.954Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-19T07:52:25.958Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T07:57:06.554Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T07:58:40.343Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T07:59:52.823Z"
   },
   {
    "duration": 29,
    "start_time": "2025-01-19T08:01:14.575Z"
   },
   {
    "duration": 35,
    "start_time": "2025-01-19T08:02:41.775Z"
   },
   {
    "duration": 34,
    "start_time": "2025-01-19T08:04:04.626Z"
   },
   {
    "duration": 834,
    "start_time": "2025-01-19T08:06:44.459Z"
   },
   {
    "duration": 815,
    "start_time": "2025-01-19T08:07:01.395Z"
   },
   {
    "duration": 186,
    "start_time": "2025-01-19T08:07:02.213Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T08:07:02.401Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T08:07:02.425Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-19T08:07:02.436Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-19T08:07:02.469Z"
   },
   {
    "duration": 45,
    "start_time": "2025-01-19T08:07:02.485Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T08:07:02.532Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-19T08:07:02.542Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-19T08:07:02.565Z"
   },
   {
    "duration": 44,
    "start_time": "2025-01-19T08:07:02.589Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T08:07:02.635Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-19T08:07:02.643Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T08:07:02.664Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T08:07:02.724Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T08:07:02.736Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-19T08:07:02.747Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T08:07:02.764Z"
   },
   {
    "duration": 42,
    "start_time": "2025-01-19T08:07:02.790Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T08:07:02.834Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T08:07:02.843Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-19T08:07:02.863Z"
   },
   {
    "duration": 66,
    "start_time": "2025-01-19T08:07:02.885Z"
   },
   {
    "duration": 25,
    "start_time": "2025-01-19T08:07:02.952Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T08:07:02.978Z"
   },
   {
    "duration": 25,
    "start_time": "2025-01-19T08:07:03.006Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T08:07:03.032Z"
   },
   {
    "duration": 33,
    "start_time": "2025-01-19T08:07:03.061Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-19T08:07:03.096Z"
   },
   {
    "duration": 843,
    "start_time": "2025-01-19T08:07:03.130Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T08:07:03.975Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T08:07:03.976Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T08:07:03.977Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T08:07:03.978Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T08:07:03.979Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T08:07:03.980Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T08:07:03.981Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T08:07:03.982Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T08:10:21.136Z"
   },
   {
    "duration": 35,
    "start_time": "2025-01-19T08:10:34.422Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T16:29:33.719Z"
   },
   {
    "duration": 2508,
    "start_time": "2025-01-19T16:29:49.840Z"
   },
   {
    "duration": 249,
    "start_time": "2025-01-19T16:29:52.350Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T16:29:52.601Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T16:29:52.614Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-19T16:29:52.624Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T16:29:52.656Z"
   },
   {
    "duration": 43,
    "start_time": "2025-01-19T16:29:52.669Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T16:29:52.713Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T16:29:52.724Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-19T16:29:52.745Z"
   },
   {
    "duration": 43,
    "start_time": "2025-01-19T16:29:52.768Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T16:29:52.812Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T16:29:52.821Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T16:29:52.840Z"
   },
   {
    "duration": 42,
    "start_time": "2025-01-19T16:29:52.867Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T16:29:52.911Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-19T16:29:52.919Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-19T16:29:52.936Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T16:29:52.961Z"
   },
   {
    "duration": 39,
    "start_time": "2025-01-19T16:29:52.974Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-19T16:29:53.014Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-19T16:29:53.033Z"
   },
   {
    "duration": 63,
    "start_time": "2025-01-19T16:29:53.057Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T16:29:53.122Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-19T16:29:53.148Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-19T16:29:53.174Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T16:29:53.199Z"
   },
   {
    "duration": 33,
    "start_time": "2025-01-19T16:29:53.228Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-19T16:29:53.263Z"
   },
   {
    "duration": 36,
    "start_time": "2025-01-19T16:29:53.301Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-19T16:29:53.340Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T16:29:53.346Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T16:29:53.348Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T16:29:53.349Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T16:29:53.350Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T16:29:53.352Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T16:29:53.354Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T16:29:53.355Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T16:30:01.484Z"
   },
   {
    "duration": 278,
    "start_time": "2025-01-19T16:30:48.707Z"
   },
   {
    "duration": 275,
    "start_time": "2025-01-19T16:31:16.892Z"
   },
   {
    "duration": 224,
    "start_time": "2025-01-19T16:31:29.057Z"
   },
   {
    "duration": 275,
    "start_time": "2025-01-19T16:31:40.408Z"
   },
   {
    "duration": 268,
    "start_time": "2025-01-19T16:33:12.457Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T16:34:36.916Z"
   },
   {
    "duration": 216,
    "start_time": "2025-01-19T16:36:11.938Z"
   },
   {
    "duration": 401,
    "start_time": "2025-01-19T16:52:19.164Z"
   },
   {
    "duration": 400,
    "start_time": "2025-01-19T16:55:03.149Z"
   },
   {
    "duration": 851,
    "start_time": "2025-01-19T17:04:07.235Z"
   },
   {
    "duration": 183,
    "start_time": "2025-01-19T17:04:08.088Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T17:04:08.273Z"
   },
   {
    "duration": 29,
    "start_time": "2025-01-19T17:04:08.286Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-19T17:04:08.317Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T17:04:08.350Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:04:08.363Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T17:04:08.410Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T17:04:08.420Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-19T17:04:08.441Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:04:08.464Z"
   },
   {
    "duration": 36,
    "start_time": "2025-01-19T17:04:08.476Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-19T17:04:08.514Z"
   },
   {
    "duration": 25,
    "start_time": "2025-01-19T17:04:08.535Z"
   },
   {
    "duration": 48,
    "start_time": "2025-01-19T17:04:08.562Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T17:04:08.612Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-19T17:04:08.621Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T17:04:08.638Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:04:08.664Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T17:04:08.709Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T17:04:08.720Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-19T17:04:08.740Z"
   },
   {
    "duration": 66,
    "start_time": "2025-01-19T17:04:08.763Z"
   },
   {
    "duration": 27,
    "start_time": "2025-01-19T17:04:08.831Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T17:04:08.860Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T17:04:08.888Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T17:04:08.916Z"
   },
   {
    "duration": 35,
    "start_time": "2025-01-19T17:04:08.944Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-19T17:04:08.981Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-19T17:04:09.013Z"
   },
   {
    "duration": 244,
    "start_time": "2025-01-19T17:04:09.051Z"
   },
   {
    "duration": 339,
    "start_time": "2025-01-19T17:04:09.297Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:04:09.637Z"
   },
   {
    "duration": 219,
    "start_time": "2025-01-19T17:04:09.649Z"
   },
   {
    "duration": 468,
    "start_time": "2025-01-19T17:04:09.870Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:04:10.339Z"
   },
   {
    "duration": 208,
    "start_time": "2025-01-19T17:04:10.351Z"
   },
   {
    "duration": 194,
    "start_time": "2025-01-19T17:04:10.561Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T17:04:10.757Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T17:04:10.761Z"
   },
   {
    "duration": 407,
    "start_time": "2025-01-19T17:06:47.212Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T17:08:17.812Z"
   },
   {
    "duration": 213,
    "start_time": "2025-01-19T17:08:38.852Z"
   },
   {
    "duration": 179,
    "start_time": "2025-01-19T17:09:06.648Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-19T17:14:50.928Z"
   },
   {
    "duration": 838,
    "start_time": "2025-01-19T17:16:56.655Z"
   },
   {
    "duration": 187,
    "start_time": "2025-01-19T17:16:57.495Z"
   },
   {
    "duration": 27,
    "start_time": "2025-01-19T17:16:57.684Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T17:16:57.714Z"
   },
   {
    "duration": 40,
    "start_time": "2025-01-19T17:16:57.727Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-19T17:16:57.772Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T17:16:57.808Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:16:57.821Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-19T17:16:57.832Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-19T17:16:57.856Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:16:57.911Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T17:16:57.923Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-19T17:16:57.932Z"
   },
   {
    "duration": 60,
    "start_time": "2025-01-19T17:16:57.950Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T17:16:58.012Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T17:16:58.023Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-19T17:16:58.031Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T17:16:58.049Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T17:16:58.109Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T17:16:58.119Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-19T17:16:58.129Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-19T17:16:58.146Z"
   },
   {
    "duration": 69,
    "start_time": "2025-01-19T17:16:58.168Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-19T17:16:58.239Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-19T17:16:58.262Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T17:16:58.286Z"
   },
   {
    "duration": 27,
    "start_time": "2025-01-19T17:16:58.311Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-19T17:16:58.342Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-19T17:16:58.375Z"
   },
   {
    "duration": 35,
    "start_time": "2025-01-19T17:16:58.409Z"
   },
   {
    "duration": 231,
    "start_time": "2025-01-19T17:16:58.446Z"
   },
   {
    "duration": 332,
    "start_time": "2025-01-19T17:16:58.679Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:16:59.012Z"
   },
   {
    "duration": 225,
    "start_time": "2025-01-19T17:16:59.023Z"
   },
   {
    "duration": 414,
    "start_time": "2025-01-19T17:16:59.249Z"
   },
   {
    "duration": 50,
    "start_time": "2025-01-19T17:16:59.665Z"
   },
   {
    "duration": 241,
    "start_time": "2025-01-19T17:16:59.716Z"
   },
   {
    "duration": 199,
    "start_time": "2025-01-19T17:16:59.959Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T17:17:00.160Z"
   },
   {
    "duration": 272,
    "start_time": "2025-01-19T17:17:00.173Z"
   },
   {
    "duration": 196,
    "start_time": "2025-01-19T17:17:00.446Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T17:17:00.644Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-19T17:17:00.652Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T17:19:11.975Z"
   },
   {
    "duration": 836,
    "start_time": "2025-01-19T17:29:53.339Z"
   },
   {
    "duration": 189,
    "start_time": "2025-01-19T17:29:54.177Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:29:54.368Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T17:29:54.380Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-19T17:29:54.390Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T17:29:54.444Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:29:54.470Z"
   },
   {
    "duration": 28,
    "start_time": "2025-01-19T17:29:54.482Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T17:29:54.511Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-19T17:29:54.532Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T17:29:54.554Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T17:29:54.566Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T17:29:54.609Z"
   },
   {
    "duration": 27,
    "start_time": "2025-01-19T17:29:54.629Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T17:29:54.658Z"
   },
   {
    "duration": 40,
    "start_time": "2025-01-19T17:29:54.669Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-19T17:29:54.710Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T17:29:54.728Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:29:54.755Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T17:29:54.768Z"
   },
   {
    "duration": 49,
    "start_time": "2025-01-19T17:29:54.776Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-19T17:29:54.827Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-19T17:29:54.849Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T17:29:54.913Z"
   },
   {
    "duration": 27,
    "start_time": "2025-01-19T17:29:54.940Z"
   },
   {
    "duration": 25,
    "start_time": "2025-01-19T17:29:54.969Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T17:29:54.996Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-19T17:29:55.026Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-19T17:29:55.060Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-19T17:29:55.093Z"
   },
   {
    "duration": 246,
    "start_time": "2025-01-19T17:29:55.131Z"
   },
   {
    "duration": 316,
    "start_time": "2025-01-19T17:29:55.379Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-19T17:29:55.696Z"
   },
   {
    "duration": 240,
    "start_time": "2025-01-19T17:29:55.717Z"
   },
   {
    "duration": 482,
    "start_time": "2025-01-19T17:29:55.959Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:29:56.443Z"
   },
   {
    "duration": 214,
    "start_time": "2025-01-19T17:29:56.455Z"
   },
   {
    "duration": 246,
    "start_time": "2025-01-19T17:29:56.671Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T17:29:56.919Z"
   },
   {
    "duration": 233,
    "start_time": "2025-01-19T17:29:56.931Z"
   },
   {
    "duration": 195,
    "start_time": "2025-01-19T17:29:57.167Z"
   },
   {
    "duration": 49,
    "start_time": "2025-01-19T17:29:57.363Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-19T17:29:57.414Z"
   },
   {
    "duration": 832,
    "start_time": "2025-01-19T19:05:30.813Z"
   },
   {
    "duration": 185,
    "start_time": "2025-01-19T19:05:31.647Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T19:05:31.835Z"
   },
   {
    "duration": 28,
    "start_time": "2025-01-19T19:05:31.849Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-19T19:05:31.880Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-19T19:05:31.912Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T19:05:31.926Z"
   },
   {
    "duration": 42,
    "start_time": "2025-01-19T19:05:31.938Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T19:05:31.982Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-19T19:05:32.003Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T19:05:32.026Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T19:05:32.070Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-19T19:05:32.079Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T19:05:32.099Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T19:05:32.126Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T19:05:32.171Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-19T19:05:32.181Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T19:05:32.199Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T19:05:32.225Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T19:05:32.270Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-19T19:05:32.281Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-19T19:05:32.304Z"
   },
   {
    "duration": 68,
    "start_time": "2025-01-19T19:05:32.332Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-19T19:05:32.403Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-19T19:05:32.426Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T19:05:32.449Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-19T19:05:32.474Z"
   },
   {
    "duration": 29,
    "start_time": "2025-01-19T19:05:32.502Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-19T19:05:32.533Z"
   },
   {
    "duration": 36,
    "start_time": "2025-01-19T19:05:32.566Z"
   },
   {
    "duration": 243,
    "start_time": "2025-01-19T19:05:32.604Z"
   },
   {
    "duration": 353,
    "start_time": "2025-01-19T19:05:32.849Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T19:05:33.203Z"
   },
   {
    "duration": 226,
    "start_time": "2025-01-19T19:05:33.215Z"
   },
   {
    "duration": 462,
    "start_time": "2025-01-19T19:05:33.442Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-19T19:05:33.906Z"
   },
   {
    "duration": 208,
    "start_time": "2025-01-19T19:05:33.918Z"
   },
   {
    "duration": 271,
    "start_time": "2025-01-19T19:05:34.128Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-19T19:05:34.401Z"
   },
   {
    "duration": 219,
    "start_time": "2025-01-19T19:05:34.417Z"
   },
   {
    "duration": 258,
    "start_time": "2025-01-19T19:05:34.638Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-19T19:05:34.898Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-19T19:05:34.908Z"
   },
   {
    "duration": 817,
    "start_time": "2025-01-19T21:55:59.236Z"
   },
   {
    "duration": 241,
    "start_time": "2025-01-19T21:56:00.055Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-19T21:56:00.298Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-19T21:56:00.312Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-19T21:56:00.324Z"
   },
   {
    "duration": 685,
    "start_time": "2025-01-19T21:56:00.364Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.052Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.053Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-19T21:56:01.054Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.056Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.057Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.059Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.060Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.061Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.063Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.064Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.065Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.067Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-19T21:56:01.067Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.068Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.070Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.070Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.071Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.105Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.106Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.107Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.109Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.110Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.111Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.113Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.114Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.115Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.117Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.118Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.119Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.120Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.122Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.123Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.125Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.126Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.127Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.128Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-19T21:56:01.129Z"
   },
   {
    "duration": 2559,
    "start_time": "2025-01-20T06:06:25.777Z"
   },
   {
    "duration": 229,
    "start_time": "2025-01-20T06:06:28.338Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-20T06:06:28.570Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-20T06:06:28.583Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-20T06:06:28.610Z"
   },
   {
    "duration": 643,
    "start_time": "2025-01-20T06:06:28.643Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.290Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.291Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.293Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.294Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.309Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.310Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.311Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.312Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.313Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.314Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.316Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.316Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.318Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.320Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.322Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.323Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.325Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.326Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.327Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.328Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.330Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.331Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.332Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.333Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.334Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.335Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.336Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.337Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.337Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.338Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.339Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.341Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.342Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.343Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.344Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.345Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-20T06:06:29.346Z"
   },
   {
    "duration": 164,
    "start_time": "2025-01-21T19:21:02.101Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-21T19:21:22.762Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-21T19:21:28.885Z"
   },
   {
    "duration": 2712,
    "start_time": "2025-01-21T19:21:45.014Z"
   },
   {
    "duration": 243,
    "start_time": "2025-01-21T19:21:47.728Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-21T19:21:47.973Z"
   },
   {
    "duration": 229,
    "start_time": "2025-01-21T19:21:47.987Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.219Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.221Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.222Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.223Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.224Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.225Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.226Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.227Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.228Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.230Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.231Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.232Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.233Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.234Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.236Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.237Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.270Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.271Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.273Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.274Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.276Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.277Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.278Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.279Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.280Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.281Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.282Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.284Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.284Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.285Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.287Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.288Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.289Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.290Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.291Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.292Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.293Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.294Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-21T19:21:48.295Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-21T19:23:37.510Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-21T19:24:25.594Z"
   },
   {
    "duration": 2629,
    "start_time": "2025-01-22T03:17:20.211Z"
   },
   {
    "duration": 253,
    "start_time": "2025-01-22T03:17:22.843Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-22T03:17:23.097Z"
   },
   {
    "duration": 244,
    "start_time": "2025-01-22T03:17:23.112Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.359Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.360Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.361Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.362Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.364Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.364Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.366Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.369Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.387Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.388Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.389Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.391Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.391Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.392Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.393Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.395Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.396Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.397Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.398Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.402Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.403Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.404Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.405Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.407Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.408Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.410Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.411Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.414Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.416Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.417Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.418Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.420Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.422Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.423Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.424Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.425Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.426Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.428Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:17:23.429Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-22T03:17:29.085Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-22T03:17:45.994Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T03:18:11.805Z"
   },
   {
    "duration": 41,
    "start_time": "2025-01-22T03:21:46.395Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-22T03:29:52.919Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-22T03:35:58.232Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-22T03:36:13.367Z"
   },
   {
    "duration": 52,
    "start_time": "2025-01-22T03:37:41.787Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-22T03:40:37.659Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-22T03:41:34.480Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-22T03:41:42.325Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-22T03:42:20.909Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-22T03:43:51.832Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-22T03:44:23.094Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-22T03:44:34.421Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-22T03:44:44.302Z"
   },
   {
    "duration": 137,
    "start_time": "2025-01-22T03:45:36.292Z"
   },
   {
    "duration": 134,
    "start_time": "2025-01-22T03:46:23.512Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-22T03:47:17.020Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-22T03:47:43.737Z"
   },
   {
    "duration": 52,
    "start_time": "2025-01-22T03:48:01.778Z"
   },
   {
    "duration": 117,
    "start_time": "2025-01-22T03:48:32.185Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-22T03:49:12.832Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-22T03:49:25.818Z"
   },
   {
    "duration": 75,
    "start_time": "2025-01-22T03:49:41.261Z"
   },
   {
    "duration": 90,
    "start_time": "2025-01-22T03:50:05.537Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-22T03:50:40.079Z"
   },
   {
    "duration": 46,
    "start_time": "2025-01-22T03:51:35.351Z"
   },
   {
    "duration": 114,
    "start_time": "2025-01-22T03:52:29.440Z"
   },
   {
    "duration": 68,
    "start_time": "2025-01-22T03:52:39.866Z"
   },
   {
    "duration": 45,
    "start_time": "2025-01-22T03:52:55.114Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-22T03:53:20.920Z"
   },
   {
    "duration": 60,
    "start_time": "2025-01-22T03:53:56.957Z"
   },
   {
    "duration": 70,
    "start_time": "2025-01-22T03:54:07.252Z"
   },
   {
    "duration": 691,
    "start_time": "2025-01-22T03:54:41.836Z"
   },
   {
    "duration": 887,
    "start_time": "2025-01-22T03:54:53.615Z"
   },
   {
    "duration": 234,
    "start_time": "2025-01-22T03:54:54.504Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-22T03:54:54.740Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T03:54:54.751Z"
   },
   {
    "duration": 50,
    "start_time": "2025-01-22T03:54:54.761Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-22T03:54:54.813Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T03:54:54.831Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T03:54:54.841Z"
   },
   {
    "duration": 56,
    "start_time": "2025-01-22T03:54:54.851Z"
   },
   {
    "duration": 33,
    "start_time": "2025-01-22T03:54:54.913Z"
   },
   {
    "duration": 45,
    "start_time": "2025-01-22T03:54:54.948Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-22T03:54:55.004Z"
   },
   {
    "duration": 54,
    "start_time": "2025-01-22T03:54:55.026Z"
   },
   {
    "duration": 175,
    "start_time": "2025-01-22T03:54:55.086Z"
   },
   {
    "duration": 25,
    "start_time": "2025-01-22T03:54:55.262Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-22T03:54:55.289Z"
   },
   {
    "duration": 43,
    "start_time": "2025-01-22T03:54:55.312Z"
   },
   {
    "duration": 125,
    "start_time": "2025-01-22T03:54:55.356Z"
   },
   {
    "duration": 35,
    "start_time": "2025-01-22T03:54:55.482Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-22T03:54:55.519Z"
   },
   {
    "duration": 91,
    "start_time": "2025-01-22T03:54:55.536Z"
   },
   {
    "duration": 94,
    "start_time": "2025-01-22T03:54:55.628Z"
   },
   {
    "duration": 40,
    "start_time": "2025-01-22T03:54:55.724Z"
   },
   {
    "duration": 75,
    "start_time": "2025-01-22T03:54:55.766Z"
   },
   {
    "duration": 107,
    "start_time": "2025-01-22T03:54:55.842Z"
   },
   {
    "duration": 43,
    "start_time": "2025-01-22T03:54:55.950Z"
   },
   {
    "duration": 60,
    "start_time": "2025-01-22T03:54:55.995Z"
   },
   {
    "duration": 64,
    "start_time": "2025-01-22T03:54:56.059Z"
   },
   {
    "duration": 64,
    "start_time": "2025-01-22T03:54:56.125Z"
   },
   {
    "duration": 990,
    "start_time": "2025-01-22T03:54:56.190Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-22T03:54:57.181Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.183Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.184Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.192Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.193Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.194Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.196Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.197Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.198Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.199Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.200Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.201Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T03:54:57.202Z"
   },
   {
    "duration": 94,
    "start_time": "2025-01-22T03:56:57.142Z"
   },
   {
    "duration": 84,
    "start_time": "2025-01-22T03:59:23.885Z"
   },
   {
    "duration": 92,
    "start_time": "2025-01-22T04:00:26.613Z"
   },
   {
    "duration": 87,
    "start_time": "2025-01-22T04:04:53.246Z"
   },
   {
    "duration": 97,
    "start_time": "2025-01-22T04:08:51.830Z"
   },
   {
    "duration": 82,
    "start_time": "2025-01-22T04:09:00.821Z"
   },
   {
    "duration": 58,
    "start_time": "2025-01-22T04:09:13.655Z"
   },
   {
    "duration": 54,
    "start_time": "2025-01-22T04:09:15.894Z"
   },
   {
    "duration": 84,
    "start_time": "2025-01-22T04:09:23.229Z"
   },
   {
    "duration": 85,
    "start_time": "2025-01-22T04:11:18.020Z"
   },
   {
    "duration": 84,
    "start_time": "2025-01-22T04:11:33.583Z"
   },
   {
    "duration": 91,
    "start_time": "2025-01-22T04:11:36.255Z"
   },
   {
    "duration": 162,
    "start_time": "2025-01-22T04:14:21.829Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-22T04:14:36.582Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-22T04:17:22.233Z"
   },
   {
    "duration": 82,
    "start_time": "2025-01-22T04:18:06.309Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-22T04:43:20.998Z"
   },
   {
    "duration": 67,
    "start_time": "2025-01-22T04:44:17.923Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-22T04:45:10.211Z"
   },
   {
    "duration": 57,
    "start_time": "2025-01-22T04:45:27.196Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-22T04:48:28.220Z"
   },
   {
    "duration": 66,
    "start_time": "2025-01-22T04:48:41.353Z"
   },
   {
    "duration": 28,
    "start_time": "2025-01-22T04:50:46.634Z"
   },
   {
    "duration": 57,
    "start_time": "2025-01-22T04:51:09.970Z"
   },
   {
    "duration": 77,
    "start_time": "2025-01-22T04:51:20.530Z"
   },
   {
    "duration": 290,
    "start_time": "2025-01-22T04:51:57.062Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T04:53:31.761Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-22T04:54:09.950Z"
   },
   {
    "duration": 69,
    "start_time": "2025-01-22T04:58:00.853Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-22T04:59:41.047Z"
   },
   {
    "duration": 143,
    "start_time": "2025-01-22T04:59:51.987Z"
   },
   {
    "duration": 122,
    "start_time": "2025-01-22T05:00:14.076Z"
   },
   {
    "duration": 54,
    "start_time": "2025-01-22T05:00:43.809Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-22T05:01:09.152Z"
   },
   {
    "duration": 73,
    "start_time": "2025-01-22T05:02:38.710Z"
   },
   {
    "duration": 66,
    "start_time": "2025-01-22T05:02:49.368Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-22T05:03:36.162Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-22T05:04:17.699Z"
   },
   {
    "duration": 43,
    "start_time": "2025-01-22T05:04:46.119Z"
   },
   {
    "duration": 28,
    "start_time": "2025-01-22T05:04:56.513Z"
   },
   {
    "duration": 52,
    "start_time": "2025-01-22T05:05:06.427Z"
   },
   {
    "duration": 50,
    "start_time": "2025-01-22T05:05:53.990Z"
   },
   {
    "duration": 29,
    "start_time": "2025-01-22T05:07:07.554Z"
   },
   {
    "duration": 46,
    "start_time": "2025-01-22T05:07:31.969Z"
   },
   {
    "duration": 830,
    "start_time": "2025-01-22T05:08:11.637Z"
   },
   {
    "duration": 188,
    "start_time": "2025-01-22T05:08:12.469Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-22T05:08:12.659Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-22T05:08:12.670Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-22T05:08:12.692Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-22T05:08:12.725Z"
   },
   {
    "duration": 47,
    "start_time": "2025-01-22T05:08:12.740Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T05:08:12.789Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-22T05:08:12.799Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-22T05:08:12.825Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-22T05:08:12.886Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-22T05:08:12.915Z"
   },
   {
    "duration": 74,
    "start_time": "2025-01-22T05:08:12.934Z"
   },
   {
    "duration": 186,
    "start_time": "2025-01-22T05:08:13.010Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-22T05:08:13.198Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-22T05:08:13.217Z"
   },
   {
    "duration": 64,
    "start_time": "2025-01-22T05:08:13.233Z"
   },
   {
    "duration": 104,
    "start_time": "2025-01-22T05:08:13.299Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-22T05:08:13.405Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-22T05:08:13.426Z"
   },
   {
    "duration": 90,
    "start_time": "2025-01-22T05:08:13.444Z"
   },
   {
    "duration": 91,
    "start_time": "2025-01-22T05:08:13.536Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-22T05:08:13.629Z"
   },
   {
    "duration": 57,
    "start_time": "2025-01-22T05:08:13.639Z"
   },
   {
    "duration": 100,
    "start_time": "2025-01-22T05:08:13.698Z"
   },
   {
    "duration": 47,
    "start_time": "2025-01-22T05:08:13.800Z"
   },
   {
    "duration": 49,
    "start_time": "2025-01-22T05:08:13.848Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-22T05:08:13.902Z"
   },
   {
    "duration": 322,
    "start_time": "2025-01-22T05:08:13.963Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.287Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.288Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.290Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.291Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.293Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.294Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.295Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.297Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.298Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.300Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.301Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.302Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.304Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:08:14.305Z"
   },
   {
    "duration": 46,
    "start_time": "2025-01-22T05:08:52.767Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-22T05:10:33.335Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-22T05:11:19.715Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-22T05:11:56.253Z"
   },
   {
    "duration": 61,
    "start_time": "2025-01-22T05:12:38.479Z"
   },
   {
    "duration": 67,
    "start_time": "2025-01-22T05:12:43.182Z"
   },
   {
    "duration": 622,
    "start_time": "2025-01-22T05:12:48.449Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-22T05:15:40.327Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-22T05:15:53.543Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-22T05:17:30.649Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-22T05:17:43.285Z"
   },
   {
    "duration": 69,
    "start_time": "2025-01-22T05:19:55.578Z"
   },
   {
    "duration": 76,
    "start_time": "2025-01-22T05:20:09.635Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-22T05:21:03.012Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-22T05:21:26.287Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-22T05:22:09.299Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-22T05:22:20.295Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-22T05:23:46.766Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-22T05:23:54.075Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-22T05:26:28.777Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-22T05:26:33.749Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-22T05:27:36.502Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-22T05:28:16.287Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-22T05:28:33.457Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-22T05:30:18.336Z"
   },
   {
    "duration": 813,
    "start_time": "2025-01-22T05:31:05.740Z"
   },
   {
    "duration": 189,
    "start_time": "2025-01-22T05:31:06.555Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-22T05:31:06.746Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-22T05:31:06.757Z"
   },
   {
    "duration": 49,
    "start_time": "2025-01-22T05:31:06.766Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-22T05:31:06.816Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-22T05:31:06.832Z"
   },
   {
    "duration": 46,
    "start_time": "2025-01-22T05:31:06.841Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-22T05:31:06.889Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-22T05:31:06.915Z"
   },
   {
    "duration": 50,
    "start_time": "2025-01-22T05:31:06.946Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-22T05:31:06.998Z"
   },
   {
    "duration": 77,
    "start_time": "2025-01-22T05:31:07.016Z"
   },
   {
    "duration": 159,
    "start_time": "2025-01-22T05:31:07.095Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-22T05:31:07.257Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-22T05:31:07.277Z"
   },
   {
    "duration": 38,
    "start_time": "2025-01-22T05:31:07.302Z"
   },
   {
    "duration": 125,
    "start_time": "2025-01-22T05:31:07.342Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-22T05:31:07.469Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-22T05:31:07.497Z"
   },
   {
    "duration": 79,
    "start_time": "2025-01-22T05:31:07.514Z"
   },
   {
    "duration": 75,
    "start_time": "2025-01-22T05:31:07.595Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-22T05:31:07.671Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-22T05:31:07.694Z"
   },
   {
    "duration": 94,
    "start_time": "2025-01-22T05:31:07.749Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-22T05:31:07.844Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-22T05:31:07.896Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-22T05:31:07.954Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-22T05:31:08.015Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.021Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.023Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.024Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.025Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.027Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.028Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.030Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.032Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.033Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.035Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.036Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.038Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.039Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:31:08.040Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-22T05:31:16.866Z"
   },
   {
    "duration": 64,
    "start_time": "2025-01-22T05:31:51.268Z"
   },
   {
    "duration": 744,
    "start_time": "2025-01-22T05:32:00.082Z"
   },
   {
    "duration": 211,
    "start_time": "2025-01-22T05:35:05.254Z"
   },
   {
    "duration": 47,
    "start_time": "2025-01-22T05:38:29.517Z"
   },
   {
    "duration": 792,
    "start_time": "2025-01-22T05:38:46.381Z"
   },
   {
    "duration": 184,
    "start_time": "2025-01-22T05:38:47.175Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T05:38:47.361Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T05:38:47.387Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-22T05:38:47.397Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-22T05:38:47.430Z"
   },
   {
    "duration": 47,
    "start_time": "2025-01-22T05:38:47.444Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T05:38:47.493Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-22T05:38:47.502Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-22T05:38:47.527Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-22T05:38:47.587Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-22T05:38:47.615Z"
   },
   {
    "duration": 75,
    "start_time": "2025-01-22T05:38:47.634Z"
   },
   {
    "duration": 177,
    "start_time": "2025-01-22T05:38:47.711Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-22T05:38:47.889Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-22T05:38:47.908Z"
   },
   {
    "duration": 63,
    "start_time": "2025-01-22T05:38:47.924Z"
   },
   {
    "duration": 101,
    "start_time": "2025-01-22T05:38:47.990Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-22T05:38:48.094Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-22T05:38:48.116Z"
   },
   {
    "duration": 85,
    "start_time": "2025-01-22T05:38:48.135Z"
   },
   {
    "duration": 88,
    "start_time": "2025-01-22T05:38:48.221Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-22T05:38:48.310Z"
   },
   {
    "duration": 73,
    "start_time": "2025-01-22T05:38:48.349Z"
   },
   {
    "duration": 96,
    "start_time": "2025-01-22T05:38:48.424Z"
   },
   {
    "duration": 43,
    "start_time": "2025-01-22T05:38:48.522Z"
   },
   {
    "duration": 50,
    "start_time": "2025-01-22T05:38:48.566Z"
   },
   {
    "duration": 221,
    "start_time": "2025-01-22T05:38:48.620Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.843Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.844Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.845Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.847Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.848Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.850Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.851Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.852Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.853Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.854Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.855Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.856Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.857Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.858Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:38:48.860Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-22T05:39:25.757Z"
   },
   {
    "duration": 871,
    "start_time": "2025-01-22T05:39:32.709Z"
   },
   {
    "duration": 186,
    "start_time": "2025-01-22T05:39:33.582Z"
   },
   {
    "duration": 25,
    "start_time": "2025-01-22T05:39:33.769Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-22T05:39:33.795Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-22T05:39:33.807Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-22T05:39:33.841Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-22T05:39:33.888Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T05:39:33.899Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-22T05:39:33.908Z"
   },
   {
    "duration": 66,
    "start_time": "2025-01-22T05:39:33.933Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-22T05:39:34.001Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-22T05:39:34.033Z"
   },
   {
    "duration": 75,
    "start_time": "2025-01-22T05:39:34.056Z"
   },
   {
    "duration": 170,
    "start_time": "2025-01-22T05:39:34.134Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-22T05:39:34.306Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-22T05:39:34.325Z"
   },
   {
    "duration": 61,
    "start_time": "2025-01-22T05:39:34.340Z"
   },
   {
    "duration": 102,
    "start_time": "2025-01-22T05:39:34.403Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-22T05:39:34.507Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-22T05:39:34.529Z"
   },
   {
    "duration": 83,
    "start_time": "2025-01-22T05:39:34.547Z"
   },
   {
    "duration": 86,
    "start_time": "2025-01-22T05:39:34.632Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-22T05:39:34.719Z"
   },
   {
    "duration": 72,
    "start_time": "2025-01-22T05:39:34.758Z"
   },
   {
    "duration": 96,
    "start_time": "2025-01-22T05:39:34.832Z"
   },
   {
    "duration": 47,
    "start_time": "2025-01-22T05:39:34.931Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-22T05:39:34.980Z"
   },
   {
    "duration": 239,
    "start_time": "2025-01-22T05:39:35.035Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.275Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.278Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.279Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.287Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.288Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.290Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.291Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.293Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.294Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.295Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.296Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.297Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.298Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.299Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T05:39:35.300Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-22T05:39:40.352Z"
   },
   {
    "duration": 192,
    "start_time": "2025-01-22T05:39:44.018Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-22T05:40:07.157Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-22T05:40:11.099Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-22T05:40:16.141Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-22T05:40:22.305Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T05:40:28.871Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-22T05:40:32.430Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-22T05:40:37.753Z"
   },
   {
    "duration": 33,
    "start_time": "2025-01-22T05:40:45.829Z"
   },
   {
    "duration": 27,
    "start_time": "2025-01-22T05:40:50.715Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-22T05:40:55.182Z"
   },
   {
    "duration": 48,
    "start_time": "2025-01-22T05:40:59.280Z"
   },
   {
    "duration": 98,
    "start_time": "2025-01-22T05:41:05.647Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-22T05:41:10.513Z"
   },
   {
    "duration": 67,
    "start_time": "2025-01-22T05:41:13.206Z"
   },
   {
    "duration": 38,
    "start_time": "2025-01-22T05:41:17.165Z"
   },
   {
    "duration": 87,
    "start_time": "2025-01-22T05:41:22.567Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-22T05:41:26.530Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-22T05:41:31.164Z"
   },
   {
    "duration": 67,
    "start_time": "2025-01-22T05:41:34.856Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-22T05:41:39.840Z"
   },
   {
    "duration": 55,
    "start_time": "2025-01-22T05:43:14.371Z"
   },
   {
    "duration": 48,
    "start_time": "2025-01-22T05:43:25.125Z"
   },
   {
    "duration": 55,
    "start_time": "2025-01-22T05:43:27.807Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-22T05:43:30.856Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-22T05:43:43.948Z"
   },
   {
    "duration": 68,
    "start_time": "2025-01-22T05:43:49.358Z"
   },
   {
    "duration": 616,
    "start_time": "2025-01-22T05:43:56.119Z"
   },
   {
    "duration": 60,
    "start_time": "2025-01-22T05:44:42.710Z"
   },
   {
    "duration": 406,
    "start_time": "2025-01-22T05:46:53.202Z"
   },
   {
    "duration": 65,
    "start_time": "2025-01-22T05:47:20.064Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-22T05:48:46.469Z"
   },
   {
    "duration": 73,
    "start_time": "2025-01-22T05:49:03.809Z"
   },
   {
    "duration": 48,
    "start_time": "2025-01-22T05:49:20.604Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-22T05:49:25.073Z"
   },
   {
    "duration": 60,
    "start_time": "2025-01-22T05:49:30.078Z"
   },
   {
    "duration": 63,
    "start_time": "2025-01-22T05:49:41.071Z"
   },
   {
    "duration": 79,
    "start_time": "2025-01-22T05:49:49.651Z"
   },
   {
    "duration": 66,
    "start_time": "2025-01-22T05:51:56.938Z"
   },
   {
    "duration": 64,
    "start_time": "2025-01-22T05:52:16.575Z"
   },
   {
    "duration": 168,
    "start_time": "2025-01-22T05:56:00.932Z"
   },
   {
    "duration": 34,
    "start_time": "2025-01-22T05:59:20.607Z"
   },
   {
    "duration": 233,
    "start_time": "2025-01-22T05:59:50.023Z"
   },
   {
    "duration": 50,
    "start_time": "2025-01-22T05:59:52.356Z"
   },
   {
    "duration": 50,
    "start_time": "2025-01-22T06:00:30.448Z"
   },
   {
    "duration": 52,
    "start_time": "2025-01-22T06:01:18.997Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-22T06:03:09.205Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-22T06:03:20.390Z"
   },
   {
    "duration": 58,
    "start_time": "2025-01-22T06:03:32.374Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-22T06:14:12.557Z"
   },
   {
    "duration": 82,
    "start_time": "2025-01-22T06:52:33.039Z"
   },
   {
    "duration": 147,
    "start_time": "2025-01-22T06:52:34.600Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:52:34.749Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-22T06:52:34.849Z"
   },
   {
    "duration": 46,
    "start_time": "2025-01-22T06:52:34.937Z"
   },
   {
    "duration": 792,
    "start_time": "2025-01-22T06:55:16.242Z"
   },
   {
    "duration": 181,
    "start_time": "2025-01-22T06:55:17.038Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-22T06:55:17.221Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T06:55:17.232Z"
   },
   {
    "duration": 61,
    "start_time": "2025-01-22T06:55:17.241Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-22T06:55:17.304Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T06:55:17.317Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-22T06:55:17.327Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-22T06:55:17.336Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-22T06:55:17.399Z"
   },
   {
    "duration": 25,
    "start_time": "2025-01-22T06:55:17.430Z"
   },
   {
    "duration": 39,
    "start_time": "2025-01-22T06:55:17.457Z"
   },
   {
    "duration": 60,
    "start_time": "2025-01-22T06:55:17.497Z"
   },
   {
    "duration": 177,
    "start_time": "2025-01-22T06:55:17.559Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-22T06:55:17.738Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-22T06:55:17.756Z"
   },
   {
    "duration": 41,
    "start_time": "2025-01-22T06:55:17.787Z"
   },
   {
    "duration": 110,
    "start_time": "2025-01-22T06:55:17.830Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-22T06:55:17.941Z"
   },
   {
    "duration": 28,
    "start_time": "2025-01-22T06:55:17.962Z"
   },
   {
    "duration": 60,
    "start_time": "2025-01-22T06:55:17.991Z"
   },
   {
    "duration": 100,
    "start_time": "2025-01-22T06:55:18.053Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-22T06:55:18.154Z"
   },
   {
    "duration": 57,
    "start_time": "2025-01-22T06:55:18.207Z"
   },
   {
    "duration": 104,
    "start_time": "2025-01-22T06:55:18.265Z"
   },
   {
    "duration": 50,
    "start_time": "2025-01-22T06:55:18.371Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-22T06:55:18.422Z"
   },
   {
    "duration": 65,
    "start_time": "2025-01-22T06:55:18.480Z"
   },
   {
    "duration": 68,
    "start_time": "2025-01-22T06:55:18.547Z"
   },
   {
    "duration": 807,
    "start_time": "2025-01-22T06:55:18.616Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.425Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.426Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.427Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.428Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.429Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.430Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.431Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-22T06:55:19.432Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.434Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.435Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.436Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.436Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-22T06:55:19.438Z"
   },
   {
    "duration": 2654,
    "start_time": "2025-01-23T02:10:19.950Z"
   },
   {
    "duration": 258,
    "start_time": "2025-01-23T02:10:22.700Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T02:10:31.570Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T02:11:07.444Z"
   },
   {
    "duration": 33,
    "start_time": "2025-01-23T02:11:11.279Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T02:11:16.293Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T02:11:20.830Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-23T02:12:16.263Z"
   },
   {
    "duration": 237,
    "start_time": "2025-01-23T02:13:29.618Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-23T02:13:37.974Z"
   },
   {
    "duration": 846,
    "start_time": "2025-01-23T02:14:01.680Z"
   },
   {
    "duration": 195,
    "start_time": "2025-01-23T02:14:02.528Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T02:14:02.724Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-23T02:14:02.737Z"
   },
   {
    "duration": 64,
    "start_time": "2025-01-23T02:14:02.745Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-23T02:14:02.810Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T02:14:02.831Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T02:14:02.840Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T02:14:02.852Z"
   },
   {
    "duration": 35,
    "start_time": "2025-01-23T02:14:02.906Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-23T02:14:02.944Z"
   },
   {
    "duration": 36,
    "start_time": "2025-01-23T02:14:02.972Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-23T02:14:03.011Z"
   },
   {
    "duration": 219,
    "start_time": "2025-01-23T02:14:03.072Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-23T02:14:03.292Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-23T02:14:03.325Z"
   },
   {
    "duration": 40,
    "start_time": "2025-01-23T02:14:03.345Z"
   },
   {
    "duration": 91,
    "start_time": "2025-01-23T02:14:03.406Z"
   },
   {
    "duration": 28,
    "start_time": "2025-01-23T02:14:03.505Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T02:14:03.535Z"
   },
   {
    "duration": 85,
    "start_time": "2025-01-23T02:14:03.560Z"
   },
   {
    "duration": 83,
    "start_time": "2025-01-23T02:14:03.648Z"
   },
   {
    "duration": 39,
    "start_time": "2025-01-23T02:14:03.733Z"
   },
   {
    "duration": 76,
    "start_time": "2025-01-23T02:14:03.774Z"
   },
   {
    "duration": 126,
    "start_time": "2025-01-23T02:14:03.852Z"
   },
   {
    "duration": 55,
    "start_time": "2025-01-23T02:14:03.980Z"
   },
   {
    "duration": 74,
    "start_time": "2025-01-23T02:14:04.038Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-23T02:14:04.115Z"
   },
   {
    "duration": 358,
    "start_time": "2025-01-23T02:14:04.121Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.481Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.482Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.484Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.485Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.486Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.488Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.505Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.506Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.507Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.508Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.509Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.510Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.512Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.513Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:14:04.514Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-23T02:24:49.903Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-23T02:25:41.494Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-23T02:25:44.521Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-23T02:25:48.511Z"
   },
   {
    "duration": 805,
    "start_time": "2025-01-23T02:25:54.489Z"
   },
   {
    "duration": 182,
    "start_time": "2025-01-23T02:25:55.296Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T02:25:55.480Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T02:25:55.506Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-23T02:25:55.517Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T02:25:55.549Z"
   },
   {
    "duration": 44,
    "start_time": "2025-01-23T02:25:55.564Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T02:25:55.611Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-23T02:25:55.621Z"
   },
   {
    "duration": 56,
    "start_time": "2025-01-23T02:25:55.649Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-23T02:25:55.707Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-23T02:25:55.734Z"
   },
   {
    "duration": 75,
    "start_time": "2025-01-23T02:25:55.753Z"
   },
   {
    "duration": 164,
    "start_time": "2025-01-23T02:25:55.830Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-23T02:25:55.995Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T02:25:56.019Z"
   },
   {
    "duration": 39,
    "start_time": "2025-01-23T02:25:56.035Z"
   },
   {
    "duration": 132,
    "start_time": "2025-01-23T02:25:56.075Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-23T02:25:56.209Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T02:25:56.231Z"
   },
   {
    "duration": 85,
    "start_time": "2025-01-23T02:25:56.250Z"
   },
   {
    "duration": 85,
    "start_time": "2025-01-23T02:25:56.337Z"
   },
   {
    "duration": 36,
    "start_time": "2025-01-23T02:25:56.424Z"
   },
   {
    "duration": 55,
    "start_time": "2025-01-23T02:25:56.462Z"
   },
   {
    "duration": 98,
    "start_time": "2025-01-23T02:25:56.519Z"
   },
   {
    "duration": 45,
    "start_time": "2025-01-23T02:25:56.620Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-23T02:25:56.667Z"
   },
   {
    "duration": 2,
    "start_time": "2025-01-23T02:25:56.724Z"
   },
   {
    "duration": 317,
    "start_time": "2025-01-23T02:25:56.728Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.047Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.048Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.049Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.050Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.051Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.052Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.053Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.054Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.055Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.056Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.057Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.058Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.059Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.060Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T02:25:57.061Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-23T02:26:21.459Z"
   },
   {
    "duration": 40,
    "start_time": "2025-01-23T02:26:25.848Z"
   },
   {
    "duration": 74,
    "start_time": "2025-01-23T02:29:52.100Z"
   },
   {
    "duration": 71,
    "start_time": "2025-01-23T02:29:57.056Z"
   },
   {
    "duration": 617,
    "start_time": "2025-01-23T02:30:02.832Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-23T02:49:08.360Z"
   },
   {
    "duration": 57,
    "start_time": "2025-01-23T02:49:24.267Z"
   },
   {
    "duration": 124,
    "start_time": "2025-01-23T02:51:18.545Z"
   },
   {
    "duration": 39,
    "start_time": "2025-01-23T02:55:19.421Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-23T02:55:37.816Z"
   },
   {
    "duration": 865,
    "start_time": "2025-01-23T03:00:52.620Z"
   },
   {
    "duration": 189,
    "start_time": "2025-01-23T03:00:53.488Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T03:00:53.680Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-23T03:00:53.705Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-23T03:00:53.713Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-23T03:00:53.745Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T03:00:53.758Z"
   },
   {
    "duration": 43,
    "start_time": "2025-01-23T03:00:53.768Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T03:00:53.812Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-23T03:00:53.838Z"
   },
   {
    "duration": 58,
    "start_time": "2025-01-23T03:00:53.870Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-23T03:00:53.930Z"
   },
   {
    "duration": 78,
    "start_time": "2025-01-23T03:00:53.950Z"
   },
   {
    "duration": 183,
    "start_time": "2025-01-23T03:00:54.029Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T03:00:54.215Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T03:00:54.233Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-23T03:00:54.247Z"
   },
   {
    "duration": 98,
    "start_time": "2025-01-23T03:00:54.311Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-23T03:00:54.411Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T03:00:54.433Z"
   },
   {
    "duration": 84,
    "start_time": "2025-01-23T03:00:54.450Z"
   },
   {
    "duration": 87,
    "start_time": "2025-01-23T03:00:54.536Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-23T03:00:54.625Z"
   },
   {
    "duration": 61,
    "start_time": "2025-01-23T03:00:54.664Z"
   },
   {
    "duration": 94,
    "start_time": "2025-01-23T03:00:54.727Z"
   },
   {
    "duration": 49,
    "start_time": "2025-01-23T03:00:54.823Z"
   },
   {
    "duration": 71,
    "start_time": "2025-01-23T03:00:54.874Z"
   },
   {
    "duration": 61,
    "start_time": "2025-01-23T03:00:54.950Z"
   },
   {
    "duration": 75,
    "start_time": "2025-01-23T03:00:55.013Z"
   },
   {
    "duration": 822,
    "start_time": "2025-01-23T03:00:55.090Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.914Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.915Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.916Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.918Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.918Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.919Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.920Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.921Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.922Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.923Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.924Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.926Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:00:55.927Z"
   },
   {
    "duration": 60,
    "start_time": "2025-01-23T03:01:41.919Z"
   },
   {
    "duration": 88,
    "start_time": "2025-01-23T03:08:17.620Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-23T03:10:11.905Z"
   },
   {
    "duration": 195,
    "start_time": "2025-01-23T03:10:11.910Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T03:10:12.107Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-23T03:10:12.117Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-23T03:10:12.127Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-23T03:10:12.158Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T03:10:12.211Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T03:10:12.222Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-23T03:10:12.232Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-23T03:10:12.256Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-23T03:10:12.320Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T03:10:12.348Z"
   },
   {
    "duration": 87,
    "start_time": "2025-01-23T03:10:12.365Z"
   },
   {
    "duration": 113,
    "start_time": "2025-01-23T03:10:12.457Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-23T03:10:12.572Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T03:10:12.604Z"
   },
   {
    "duration": 42,
    "start_time": "2025-01-23T03:10:12.620Z"
   },
   {
    "duration": 111,
    "start_time": "2025-01-23T03:10:12.664Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-23T03:10:12.777Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-23T03:10:12.810Z"
   },
   {
    "duration": 78,
    "start_time": "2025-01-23T03:10:12.831Z"
   },
   {
    "duration": 68,
    "start_time": "2025-01-23T03:10:12.910Z"
   },
   {
    "duration": 28,
    "start_time": "2025-01-23T03:10:12.979Z"
   },
   {
    "duration": 55,
    "start_time": "2025-01-23T03:10:13.008Z"
   },
   {
    "duration": 127,
    "start_time": "2025-01-23T03:10:13.065Z"
   },
   {
    "duration": 48,
    "start_time": "2025-01-23T03:10:13.194Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-23T03:10:13.244Z"
   },
   {
    "duration": 63,
    "start_time": "2025-01-23T03:10:13.298Z"
   },
   {
    "duration": 65,
    "start_time": "2025-01-23T03:10:13.363Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T03:11:18.980Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T03:14:14.672Z"
   },
   {
    "duration": 27,
    "start_time": "2025-01-23T03:15:23.085Z"
   },
   {
    "duration": 74,
    "start_time": "2025-01-23T03:15:36.220Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-23T03:16:10.420Z"
   },
   {
    "duration": 83,
    "start_time": "2025-01-23T03:17:25.863Z"
   },
   {
    "duration": 124,
    "start_time": "2025-01-23T03:19:08.926Z"
   },
   {
    "duration": 137,
    "start_time": "2025-01-23T03:22:39.719Z"
   },
   {
    "duration": 800,
    "start_time": "2025-01-23T03:23:36.657Z"
   },
   {
    "duration": 185,
    "start_time": "2025-01-23T03:23:37.459Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T03:23:37.646Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T03:23:37.657Z"
   },
   {
    "duration": 61,
    "start_time": "2025-01-23T03:23:37.666Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T03:23:37.729Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T03:23:37.744Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T03:23:37.754Z"
   },
   {
    "duration": 61,
    "start_time": "2025-01-23T03:23:37.764Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-23T03:23:37.830Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-23T03:23:37.863Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-23T03:23:37.916Z"
   },
   {
    "duration": 76,
    "start_time": "2025-01-23T03:23:37.934Z"
   },
   {
    "duration": 168,
    "start_time": "2025-01-23T03:23:38.012Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-23T03:23:38.181Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-23T03:23:38.206Z"
   },
   {
    "duration": 39,
    "start_time": "2025-01-23T03:23:38.225Z"
   },
   {
    "duration": 121,
    "start_time": "2025-01-23T03:23:38.266Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-23T03:23:38.389Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T03:23:38.415Z"
   },
   {
    "duration": 80,
    "start_time": "2025-01-23T03:23:38.433Z"
   },
   {
    "duration": 103,
    "start_time": "2025-01-23T03:23:38.515Z"
   },
   {
    "duration": 88,
    "start_time": "2025-01-23T03:23:38.620Z"
   },
   {
    "duration": 124,
    "start_time": "2025-01-23T03:23:38.709Z"
   },
   {
    "duration": 212,
    "start_time": "2025-01-23T03:23:38.835Z"
   },
   {
    "duration": 89,
    "start_time": "2025-01-23T03:23:39.048Z"
   },
   {
    "duration": 95,
    "start_time": "2025-01-23T03:23:39.138Z"
   },
   {
    "duration": 64,
    "start_time": "2025-01-23T03:23:39.236Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-23T03:23:39.302Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-23T03:23:39.366Z"
   },
   {
    "duration": 142,
    "start_time": "2025-01-23T03:23:39.389Z"
   },
   {
    "duration": 409,
    "start_time": "2025-01-23T03:23:39.533Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.944Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.945Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.946Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.947Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.948Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.950Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.951Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.952Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.953Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.954Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.955Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:23:39.956Z"
   },
   {
    "duration": 27,
    "start_time": "2025-01-23T03:24:43.936Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-23T03:24:55.664Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T03:25:01.400Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-23T03:27:01.548Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-23T03:27:26.704Z"
   },
   {
    "duration": 25,
    "start_time": "2025-01-23T03:28:42.595Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T03:29:26.316Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T03:29:54.219Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T03:32:33.722Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-23T03:33:01.333Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T03:34:07.766Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-23T03:34:49.465Z"
   },
   {
    "duration": 180,
    "start_time": "2025-01-23T03:34:49.471Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T03:34:49.653Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-23T03:34:49.663Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-23T03:34:49.673Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T03:34:49.734Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T03:34:49.748Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T03:34:49.759Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-23T03:34:49.805Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-23T03:34:49.831Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-23T03:34:49.864Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T03:34:49.917Z"
   },
   {
    "duration": 46,
    "start_time": "2025-01-23T03:34:49.934Z"
   },
   {
    "duration": 109,
    "start_time": "2025-01-23T03:34:50.006Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-23T03:34:50.116Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T03:34:50.139Z"
   },
   {
    "duration": 58,
    "start_time": "2025-01-23T03:34:50.154Z"
   },
   {
    "duration": 107,
    "start_time": "2025-01-23T03:34:50.214Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T03:34:50.323Z"
   },
   {
    "duration": 90,
    "start_time": "2025-01-23T03:34:50.348Z"
   },
   {
    "duration": 80,
    "start_time": "2025-01-23T03:34:50.439Z"
   },
   {
    "duration": 68,
    "start_time": "2025-01-23T03:34:50.521Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-23T03:34:50.590Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-23T03:34:50.618Z"
   },
   {
    "duration": 54,
    "start_time": "2025-01-23T03:34:50.671Z"
   },
   {
    "duration": 46,
    "start_time": "2025-01-23T03:34:50.727Z"
   },
   {
    "duration": 52,
    "start_time": "2025-01-23T03:34:50.775Z"
   },
   {
    "duration": 58,
    "start_time": "2025-01-23T03:34:50.829Z"
   },
   {
    "duration": 60,
    "start_time": "2025-01-23T03:34:50.890Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-23T03:34:50.952Z"
   },
   {
    "duration": 667,
    "start_time": "2025-01-23T03:34:50.975Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:34:51.644Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T03:34:51.645Z"
   },
   {
    "duration": 310,
    "start_time": "2025-01-23T03:35:15.703Z"
   },
   {
    "duration": 275,
    "start_time": "2025-01-23T03:36:33.516Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T03:37:04.495Z"
   },
   {
    "duration": 231,
    "start_time": "2025-01-23T03:37:14.180Z"
   },
   {
    "duration": 408,
    "start_time": "2025-01-23T03:37:28.534Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-23T03:37:42.688Z"
   },
   {
    "duration": 232,
    "start_time": "2025-01-23T03:37:48.925Z"
   },
   {
    "duration": 194,
    "start_time": "2025-01-23T03:37:55.242Z"
   },
   {
    "duration": 116,
    "start_time": "2025-01-23T03:38:14.167Z"
   },
   {
    "duration": 136,
    "start_time": "2025-01-23T03:39:39.249Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T03:39:51.591Z"
   },
   {
    "duration": 230,
    "start_time": "2025-01-23T03:39:57.221Z"
   },
   {
    "duration": 180,
    "start_time": "2025-01-23T03:40:01.854Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T03:40:20.698Z"
   },
   {
    "duration": 79,
    "start_time": "2025-01-23T03:40:36.105Z"
   },
   {
    "duration": 38,
    "start_time": "2025-01-23T03:41:42.042Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T03:43:12.939Z"
   },
   {
    "duration": 99,
    "start_time": "2025-01-23T03:53:51.962Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-23T03:54:18.391Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-23T03:58:42.108Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-23T03:59:23.797Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-23T03:59:46.992Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T04:00:09.994Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-23T04:02:10.193Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-23T04:02:31.045Z"
   },
   {
    "duration": 219,
    "start_time": "2025-01-23T04:02:31.050Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T04:02:31.272Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-23T04:02:31.287Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-23T04:02:31.310Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T04:02:31.348Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T04:02:31.363Z"
   },
   {
    "duration": 41,
    "start_time": "2025-01-23T04:02:31.373Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-23T04:02:31.416Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-23T04:02:31.442Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-23T04:02:31.475Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T04:02:31.536Z"
   },
   {
    "duration": 223,
    "start_time": "2025-01-23T04:02:31.555Z"
   },
   {
    "duration": 115,
    "start_time": "2025-01-23T04:02:31.782Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-23T04:02:31.905Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T04:02:31.926Z"
   },
   {
    "duration": 75,
    "start_time": "2025-01-23T04:02:31.943Z"
   },
   {
    "duration": 107,
    "start_time": "2025-01-23T04:02:32.020Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T04:02:32.129Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T04:02:32.154Z"
   },
   {
    "duration": 101,
    "start_time": "2025-01-23T04:02:32.172Z"
   },
   {
    "duration": 99,
    "start_time": "2025-01-23T04:02:32.275Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T04:02:32.376Z"
   },
   {
    "duration": 71,
    "start_time": "2025-01-23T04:02:32.404Z"
   },
   {
    "duration": 63,
    "start_time": "2025-01-23T04:02:32.477Z"
   },
   {
    "duration": 48,
    "start_time": "2025-01-23T04:02:32.541Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-23T04:02:32.591Z"
   },
   {
    "duration": 76,
    "start_time": "2025-01-23T04:02:32.652Z"
   },
   {
    "duration": 73,
    "start_time": "2025-01-23T04:02:32.730Z"
   },
   {
    "duration": 25,
    "start_time": "2025-01-23T04:02:32.805Z"
   },
   {
    "duration": 173,
    "start_time": "2025-01-23T04:02:32.832Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T04:02:33.010Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T04:02:33.035Z"
   },
   {
    "duration": 324,
    "start_time": "2025-01-23T04:02:33.046Z"
   },
   {
    "duration": 337,
    "start_time": "2025-01-23T04:02:33.372Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T04:02:33.710Z"
   },
   {
    "duration": 245,
    "start_time": "2025-01-23T04:02:33.726Z"
   },
   {
    "duration": 576,
    "start_time": "2025-01-23T04:02:33.972Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T04:02:34.550Z"
   },
   {
    "duration": 276,
    "start_time": "2025-01-23T04:02:34.563Z"
   },
   {
    "duration": 208,
    "start_time": "2025-01-23T04:02:34.844Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-23T04:02:35.054Z"
   },
   {
    "duration": 278,
    "start_time": "2025-01-23T04:02:35.068Z"
   },
   {
    "duration": 198,
    "start_time": "2025-01-23T04:02:35.348Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T04:02:35.547Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-23T04:02:39.743Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-23T04:03:40.197Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-23T04:03:51.346Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-23T04:10:11.724Z"
   },
   {
    "duration": 57,
    "start_time": "2025-01-23T04:10:17.418Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T04:11:24.354Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-23T04:15:29.977Z"
   },
   {
    "duration": 58,
    "start_time": "2025-01-23T04:17:56.891Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-23T04:18:29.763Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-23T04:18:44.154Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-23T04:19:14.369Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-23T04:19:53.754Z"
   },
   {
    "duration": 193,
    "start_time": "2025-01-23T04:19:53.759Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T04:19:53.954Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T04:19:53.966Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-23T04:19:53.979Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T04:19:54.040Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T04:19:54.055Z"
   },
   {
    "duration": 41,
    "start_time": "2025-01-23T04:19:54.067Z"
   },
   {
    "duration": 28,
    "start_time": "2025-01-23T04:19:54.110Z"
   },
   {
    "duration": 39,
    "start_time": "2025-01-23T04:19:54.143Z"
   },
   {
    "duration": 44,
    "start_time": "2025-01-23T04:19:54.185Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-23T04:19:54.231Z"
   },
   {
    "duration": 72,
    "start_time": "2025-01-23T04:19:54.259Z"
   },
   {
    "duration": 118,
    "start_time": "2025-01-23T04:19:54.335Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T04:19:54.456Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-23T04:19:54.482Z"
   },
   {
    "duration": 44,
    "start_time": "2025-01-23T04:19:54.510Z"
   },
   {
    "duration": 119,
    "start_time": "2025-01-23T04:19:54.556Z"
   },
   {
    "duration": 28,
    "start_time": "2025-01-23T04:19:54.677Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-23T04:19:54.707Z"
   },
   {
    "duration": 108,
    "start_time": "2025-01-23T04:19:54.727Z"
   },
   {
    "duration": 84,
    "start_time": "2025-01-23T04:19:54.837Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T04:19:54.923Z"
   },
   {
    "duration": 52,
    "start_time": "2025-01-23T04:19:54.936Z"
   },
   {
    "duration": 203,
    "start_time": "2025-01-23T04:19:54.990Z"
   },
   {
    "duration": 49,
    "start_time": "2025-01-23T04:19:55.195Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-23T04:19:55.246Z"
   },
   {
    "duration": 71,
    "start_time": "2025-01-23T04:19:55.309Z"
   },
   {
    "duration": 84,
    "start_time": "2025-01-23T04:19:55.381Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-23T04:19:55.467Z"
   },
   {
    "duration": 179,
    "start_time": "2025-01-23T04:19:55.491Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-23T04:19:55.672Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T04:19:55.692Z"
   },
   {
    "duration": 311,
    "start_time": "2025-01-23T04:19:55.703Z"
   },
   {
    "duration": 295,
    "start_time": "2025-01-23T04:19:56.017Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T04:19:56.314Z"
   },
   {
    "duration": 239,
    "start_time": "2025-01-23T04:19:56.326Z"
   },
   {
    "duration": 478,
    "start_time": "2025-01-23T04:19:56.566Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-23T04:19:57.046Z"
   },
   {
    "duration": 275,
    "start_time": "2025-01-23T04:19:57.060Z"
   },
   {
    "duration": 221,
    "start_time": "2025-01-23T04:19:57.340Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T04:19:57.562Z"
   },
   {
    "duration": 282,
    "start_time": "2025-01-23T04:19:57.574Z"
   },
   {
    "duration": 209,
    "start_time": "2025-01-23T04:19:57.858Z"
   },
   {
    "duration": 35,
    "start_time": "2025-01-23T04:19:58.071Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T04:19:58.109Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-23T04:19:58.124Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-23T04:20:16.747Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-23T04:20:28.129Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T04:20:51.722Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T04:21:58.045Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T04:22:59.293Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-23T04:23:31.741Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T04:23:58.738Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-23T04:24:30.937Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-23T04:25:59.839Z"
   },
   {
    "duration": 29,
    "start_time": "2025-01-23T04:29:11.379Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T04:30:28.626Z"
   },
   {
    "duration": 838,
    "start_time": "2025-01-23T04:37:16.383Z"
   },
   {
    "duration": 218,
    "start_time": "2025-01-23T04:37:17.223Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T04:37:17.443Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T04:37:17.454Z"
   },
   {
    "duration": 65,
    "start_time": "2025-01-23T04:37:17.466Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T04:37:17.532Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T04:37:17.549Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T04:37:17.562Z"
   },
   {
    "duration": 54,
    "start_time": "2025-01-23T04:37:17.573Z"
   },
   {
    "duration": 39,
    "start_time": "2025-01-23T04:37:17.632Z"
   },
   {
    "duration": 61,
    "start_time": "2025-01-23T04:37:17.672Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-23T04:37:17.735Z"
   },
   {
    "duration": 89,
    "start_time": "2025-01-23T04:37:17.754Z"
   },
   {
    "duration": 200,
    "start_time": "2025-01-23T04:37:17.845Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-23T04:37:18.047Z"
   },
   {
    "duration": 35,
    "start_time": "2025-01-23T04:37:18.071Z"
   },
   {
    "duration": 56,
    "start_time": "2025-01-23T04:37:18.108Z"
   },
   {
    "duration": 116,
    "start_time": "2025-01-23T04:37:18.166Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-23T04:37:18.284Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-23T04:37:18.318Z"
   },
   {
    "duration": 110,
    "start_time": "2025-01-23T04:37:18.340Z"
   },
   {
    "duration": 105,
    "start_time": "2025-01-23T04:37:18.452Z"
   },
   {
    "duration": 52,
    "start_time": "2025-01-23T04:37:18.560Z"
   },
   {
    "duration": 68,
    "start_time": "2025-01-23T04:37:18.616Z"
   },
   {
    "duration": 137,
    "start_time": "2025-01-23T04:37:18.688Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-23T04:37:18.827Z"
   },
   {
    "duration": 72,
    "start_time": "2025-01-23T04:37:18.880Z"
   },
   {
    "duration": 73,
    "start_time": "2025-01-23T04:37:18.957Z"
   },
   {
    "duration": 73,
    "start_time": "2025-01-23T04:37:19.032Z"
   },
   {
    "duration": 21,
    "start_time": "2025-01-23T04:37:19.107Z"
   },
   {
    "duration": 182,
    "start_time": "2025-01-23T04:37:19.130Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-23T04:37:19.314Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T04:37:19.334Z"
   },
   {
    "duration": 372,
    "start_time": "2025-01-23T04:37:19.345Z"
   },
   {
    "duration": 301,
    "start_time": "2025-01-23T04:37:19.719Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T04:37:20.022Z"
   },
   {
    "duration": 252,
    "start_time": "2025-01-23T04:37:20.035Z"
   },
   {
    "duration": 457,
    "start_time": "2025-01-23T04:37:20.289Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T04:37:20.748Z"
   },
   {
    "duration": 304,
    "start_time": "2025-01-23T04:37:20.765Z"
   },
   {
    "duration": 236,
    "start_time": "2025-01-23T04:37:21.071Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T04:37:21.309Z"
   },
   {
    "duration": 245,
    "start_time": "2025-01-23T04:37:21.322Z"
   },
   {
    "duration": 294,
    "start_time": "2025-01-23T04:37:21.570Z"
   },
   {
    "duration": 39,
    "start_time": "2025-01-23T04:37:21.866Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T04:37:21.907Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-23T04:37:21.924Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-23T04:37:21.931Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T04:37:21.963Z"
   },
   {
    "duration": 2524,
    "start_time": "2025-01-23T07:11:11.757Z"
   },
   {
    "duration": 232,
    "start_time": "2025-01-23T07:11:14.284Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T07:11:14.518Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T07:11:14.529Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-23T07:11:14.545Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-23T07:11:14.579Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T07:11:14.593Z"
   },
   {
    "duration": 46,
    "start_time": "2025-01-23T07:11:14.603Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-23T07:11:14.650Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-23T07:11:14.678Z"
   },
   {
    "duration": 55,
    "start_time": "2025-01-23T07:11:14.710Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T07:11:14.767Z"
   },
   {
    "duration": 72,
    "start_time": "2025-01-23T07:11:14.784Z"
   },
   {
    "duration": 121,
    "start_time": "2025-01-23T07:11:14.858Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T07:11:14.981Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T07:11:14.998Z"
   },
   {
    "duration": 59,
    "start_time": "2025-01-23T07:11:15.014Z"
   },
   {
    "duration": 146,
    "start_time": "2025-01-23T07:11:15.074Z"
   },
   {
    "duration": 29,
    "start_time": "2025-01-23T07:11:15.222Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T07:11:15.252Z"
   },
   {
    "duration": 79,
    "start_time": "2025-01-23T07:11:15.270Z"
   },
   {
    "duration": 75,
    "start_time": "2025-01-23T07:11:15.350Z"
   },
   {
    "duration": 49,
    "start_time": "2025-01-23T07:11:15.427Z"
   },
   {
    "duration": 67,
    "start_time": "2025-01-23T07:11:15.477Z"
   },
   {
    "duration": 63,
    "start_time": "2025-01-23T07:11:15.546Z"
   },
   {
    "duration": 56,
    "start_time": "2025-01-23T07:11:15.610Z"
   },
   {
    "duration": 52,
    "start_time": "2025-01-23T07:11:15.667Z"
   },
   {
    "duration": 57,
    "start_time": "2025-01-23T07:11:15.722Z"
   },
   {
    "duration": 61,
    "start_time": "2025-01-23T07:11:15.781Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-23T07:11:15.844Z"
   },
   {
    "duration": 177,
    "start_time": "2025-01-23T07:11:15.865Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-23T07:11:16.044Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T07:11:16.063Z"
   },
   {
    "duration": 348,
    "start_time": "2025-01-23T07:11:16.073Z"
   },
   {
    "duration": 306,
    "start_time": "2025-01-23T07:11:16.423Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-23T07:11:16.731Z"
   },
   {
    "duration": 240,
    "start_time": "2025-01-23T07:11:16.751Z"
   },
   {
    "duration": 385,
    "start_time": "2025-01-23T07:11:16.993Z"
   },
   {
    "duration": 66,
    "start_time": "2025-01-23T07:11:17.380Z"
   },
   {
    "duration": 247,
    "start_time": "2025-01-23T07:11:17.448Z"
   },
   {
    "duration": 196,
    "start_time": "2025-01-23T07:11:17.697Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T07:11:17.895Z"
   },
   {
    "duration": 272,
    "start_time": "2025-01-23T07:11:17.905Z"
   },
   {
    "duration": 204,
    "start_time": "2025-01-23T07:11:18.179Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T07:11:18.385Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T07:11:18.395Z"
   },
   {
    "duration": 4,
    "start_time": "2025-01-23T07:11:18.411Z"
   },
   {
    "duration": 50,
    "start_time": "2025-01-23T07:11:18.416Z"
   },
   {
    "duration": 6,
    "start_time": "2025-01-23T07:11:18.467Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T07:21:02.229Z"
   },
   {
    "duration": 160,
    "start_time": "2025-01-23T15:46:38.608Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T15:47:08.036Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T15:47:17.737Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T15:47:29.363Z"
   },
   {
    "duration": 2477,
    "start_time": "2025-01-23T15:47:34.842Z"
   },
   {
    "duration": 238,
    "start_time": "2025-01-23T15:47:37.321Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T15:47:37.560Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T15:47:37.571Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-23T15:47:37.583Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-23T15:47:37.635Z"
   },
   {
    "duration": 236,
    "start_time": "2025-01-23T15:47:37.649Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.888Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.890Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.891Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-23T15:47:37.891Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.892Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.893Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.894Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.895Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.896Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.897Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.898Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.912Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.913Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.914Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.915Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.916Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.917Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-23T15:47:37.918Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.919Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.922Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.923Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.924Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.925Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.927Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.930Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.932Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.933Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.935Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.936Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.938Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.939Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.941Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.942Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.943Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:37.945Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:38.064Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:38.112Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:38.113Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-23T15:47:38.114Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:38.116Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:38.118Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:47:38.119Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T15:47:58.079Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T15:48:13.927Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T15:48:19.550Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T15:48:24.111Z"
   },
   {
    "duration": 802,
    "start_time": "2025-01-23T15:48:29.844Z"
   },
   {
    "duration": 175,
    "start_time": "2025-01-23T15:48:30.648Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T15:48:30.825Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T15:48:30.836Z"
   },
   {
    "duration": 66,
    "start_time": "2025-01-23T15:48:30.847Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-23T15:48:30.915Z"
   },
   {
    "duration": 285,
    "start_time": "2025-01-23T15:48:30.929Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.217Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.218Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.219Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.220Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.221Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.222Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.223Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.224Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.225Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.226Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.227Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.229Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.230Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.230Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.231Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.233Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.234Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-23T15:48:31.234Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.236Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.237Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.238Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.240Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.241Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.242Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.244Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.245Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.247Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.248Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.250Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.255Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.311Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.312Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.314Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.315Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.316Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.317Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.318Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.319Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.320Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.321Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.322Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:48:31.323Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T15:48:37.076Z"
   },
   {
    "duration": 176,
    "start_time": "2025-01-23T15:56:00.109Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T15:56:06.840Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T15:56:09.683Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-23T15:56:13.260Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T15:56:17.846Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T15:56:29.818Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T15:56:39.748Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-23T15:56:45.712Z"
   },
   {
    "duration": 835,
    "start_time": "2025-01-23T15:56:57.650Z"
   },
   {
    "duration": 189,
    "start_time": "2025-01-23T15:56:58.488Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T15:56:58.679Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T15:56:58.690Z"
   },
   {
    "duration": 31,
    "start_time": "2025-01-23T15:56:58.715Z"
   },
   {
    "duration": 13,
    "start_time": "2025-01-23T15:56:58.747Z"
   },
   {
    "duration": 285,
    "start_time": "2025-01-23T15:56:58.762Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.050Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.051Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.053Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.054Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.054Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.055Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.056Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.057Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.059Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.060Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.061Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.062Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.064Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.065Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.067Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.068Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.070Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.072Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.111Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.113Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.115Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.116Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.118Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.119Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.121Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.122Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.123Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.124Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.125Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.126Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.127Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.128Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.129Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.131Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.132Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.134Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.136Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.137Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.139Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.140Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.142Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T15:56:59.143Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T15:58:02.545Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T15:58:07.086Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T15:58:12.529Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-23T15:58:22.167Z"
   },
   {
    "duration": 19,
    "start_time": "2025-01-23T15:58:49.658Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T15:59:08.787Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T16:00:41.041Z"
   },
   {
    "duration": 33,
    "start_time": "2025-01-23T16:00:48.376Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-23T16:00:58.034Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-23T16:01:03.204Z"
   },
   {
    "duration": 52,
    "start_time": "2025-01-23T16:01:08.410Z"
   },
   {
    "duration": 110,
    "start_time": "2025-01-23T16:02:18.041Z"
   },
   {
    "duration": 497,
    "start_time": "2025-01-23T16:04:58.643Z"
   },
   {
    "duration": 119,
    "start_time": "2025-01-23T16:05:45.220Z"
   },
   {
    "duration": 142,
    "start_time": "2025-01-23T16:06:55.355Z"
   },
   {
    "duration": 69,
    "start_time": "2025-01-23T16:07:38.481Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T16:08:32.164Z"
   },
   {
    "duration": 98,
    "start_time": "2025-01-23T16:08:40.774Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T16:09:00.188Z"
   },
   {
    "duration": 28,
    "start_time": "2025-01-23T16:09:25.936Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-23T16:09:38.377Z"
   },
   {
    "duration": 66,
    "start_time": "2025-01-23T16:10:05.653Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T16:10:13.253Z"
   },
   {
    "duration": 54,
    "start_time": "2025-01-23T16:11:16.943Z"
   },
   {
    "duration": 54,
    "start_time": "2025-01-23T16:11:25.350Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-23T16:11:28.351Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T16:11:31.022Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-23T16:12:17.897Z"
   },
   {
    "duration": 162,
    "start_time": "2025-01-23T17:11:27.234Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-23T17:11:54.673Z"
   },
   {
    "duration": 25,
    "start_time": "2025-01-23T17:12:13.435Z"
   },
   {
    "duration": 2556,
    "start_time": "2025-01-23T17:13:29.844Z"
   },
   {
    "duration": 274,
    "start_time": "2025-01-23T17:13:32.402Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T17:13:32.678Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T17:13:32.690Z"
   },
   {
    "duration": 33,
    "start_time": "2025-01-23T17:13:32.701Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T17:13:32.769Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-23T17:13:32.786Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T17:13:32.799Z"
   },
   {
    "duration": 60,
    "start_time": "2025-01-23T17:13:32.812Z"
   },
   {
    "duration": 45,
    "start_time": "2025-01-23T17:13:32.876Z"
   },
   {
    "duration": 56,
    "start_time": "2025-01-23T17:13:32.924Z"
   },
   {
    "duration": 24,
    "start_time": "2025-01-23T17:13:32.983Z"
   },
   {
    "duration": 78,
    "start_time": "2025-01-23T17:13:33.008Z"
   },
   {
    "duration": 140,
    "start_time": "2025-01-23T17:13:33.089Z"
   },
   {
    "duration": 25,
    "start_time": "2025-01-23T17:13:33.232Z"
   },
   {
    "duration": 29,
    "start_time": "2025-01-23T17:13:33.259Z"
   },
   {
    "duration": 39,
    "start_time": "2025-01-23T17:13:33.289Z"
   },
   {
    "duration": 167,
    "start_time": "2025-01-23T17:13:33.330Z"
   },
   {
    "duration": 33,
    "start_time": "2025-01-23T17:13:33.499Z"
   },
   {
    "duration": 36,
    "start_time": "2025-01-23T17:13:33.535Z"
   },
   {
    "duration": 72,
    "start_time": "2025-01-23T17:13:33.573Z"
   },
   {
    "duration": 90,
    "start_time": "2025-01-23T17:13:33.647Z"
   },
   {
    "duration": 51,
    "start_time": "2025-01-23T17:13:33.741Z"
   },
   {
    "duration": 75,
    "start_time": "2025-01-23T17:13:33.794Z"
   },
   {
    "duration": 63,
    "start_time": "2025-01-23T17:13:33.871Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-23T17:13:33.935Z"
   },
   {
    "duration": 65,
    "start_time": "2025-01-23T17:13:33.998Z"
   },
   {
    "duration": 75,
    "start_time": "2025-01-23T17:13:34.067Z"
   },
   {
    "duration": 288,
    "start_time": "2025-01-23T17:13:34.144Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.434Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.436Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.437Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.438Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.439Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.440Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.441Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.443Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.444Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.445Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.447Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.470Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.471Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-23T17:13:34.472Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.474Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.475Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.476Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.478Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.479Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:34.481Z"
   },
   {
    "duration": 3,
    "start_time": "2025-01-23T17:13:40.187Z"
   },
   {
    "duration": 906,
    "start_time": "2025-01-23T17:13:49.339Z"
   },
   {
    "duration": 193,
    "start_time": "2025-01-23T17:13:50.247Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-23T17:13:50.441Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T17:13:50.469Z"
   },
   {
    "duration": 40,
    "start_time": "2025-01-23T17:13:50.481Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T17:13:50.523Z"
   },
   {
    "duration": 37,
    "start_time": "2025-01-23T17:13:50.541Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T17:13:50.580Z"
   },
   {
    "duration": 23,
    "start_time": "2025-01-23T17:13:50.592Z"
   },
   {
    "duration": 67,
    "start_time": "2025-01-23T17:13:50.617Z"
   },
   {
    "duration": 42,
    "start_time": "2025-01-23T17:13:50.686Z"
   },
   {
    "duration": 38,
    "start_time": "2025-01-23T17:13:50.732Z"
   },
   {
    "duration": 58,
    "start_time": "2025-01-23T17:13:50.772Z"
   },
   {
    "duration": 179,
    "start_time": "2025-01-23T17:13:50.833Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-23T17:13:51.014Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T17:13:51.036Z"
   },
   {
    "duration": 69,
    "start_time": "2025-01-23T17:13:51.053Z"
   },
   {
    "duration": 152,
    "start_time": "2025-01-23T17:13:51.124Z"
   },
   {
    "duration": 32,
    "start_time": "2025-01-23T17:13:51.278Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T17:13:51.311Z"
   },
   {
    "duration": 95,
    "start_time": "2025-01-23T17:13:51.328Z"
   },
   {
    "duration": 87,
    "start_time": "2025-01-23T17:13:51.425Z"
   },
   {
    "duration": 41,
    "start_time": "2025-01-23T17:13:51.514Z"
   },
   {
    "duration": 94,
    "start_time": "2025-01-23T17:13:51.571Z"
   },
   {
    "duration": 103,
    "start_time": "2025-01-23T17:13:51.667Z"
   },
   {
    "duration": 61,
    "start_time": "2025-01-23T17:13:51.772Z"
   },
   {
    "duration": 57,
    "start_time": "2025-01-23T17:13:51.835Z"
   },
   {
    "duration": 57,
    "start_time": "2025-01-23T17:13:51.894Z"
   },
   {
    "duration": 225,
    "start_time": "2025-01-23T17:13:51.953Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.180Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.182Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.183Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.185Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.186Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.188Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.189Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.190Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.192Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.193Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.195Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.196Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.198Z"
   },
   {
    "duration": 1,
    "start_time": "2025-01-23T17:13:52.199Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.201Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.202Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.204Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.205Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.207Z"
   },
   {
    "duration": 0,
    "start_time": "2025-01-23T17:13:52.208Z"
   },
   {
    "duration": 84,
    "start_time": "2025-01-23T17:14:54.866Z"
   },
   {
    "duration": 22,
    "start_time": "2025-01-23T17:15:52.646Z"
   },
   {
    "duration": 624,
    "start_time": "2025-01-23T17:16:21.622Z"
   },
   {
    "duration": 167,
    "start_time": "2025-01-23T19:03:34.882Z"
   },
   {
    "duration": 14,
    "start_time": "2025-01-23T19:03:50.315Z"
   },
   {
    "duration": 2627,
    "start_time": "2025-01-23T19:04:01.223Z"
   },
   {
    "duration": 268,
    "start_time": "2025-01-23T19:04:03.852Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T19:04:04.121Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-23T19:04:04.132Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-23T19:04:04.141Z"
   },
   {
    "duration": 12,
    "start_time": "2025-01-23T19:04:04.205Z"
   },
   {
    "duration": 8,
    "start_time": "2025-01-23T19:04:04.219Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T19:04:04.229Z"
   },
   {
    "duration": 60,
    "start_time": "2025-01-23T19:04:04.240Z"
   },
   {
    "duration": 30,
    "start_time": "2025-01-23T19:04:04.303Z"
   },
   {
    "duration": 26,
    "start_time": "2025-01-23T19:04:04.335Z"
   },
   {
    "duration": 35,
    "start_time": "2025-01-23T19:04:04.363Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-23T19:04:04.400Z"
   },
   {
    "duration": 139,
    "start_time": "2025-01-23T19:04:04.455Z"
   },
   {
    "duration": 17,
    "start_time": "2025-01-23T19:04:04.596Z"
   },
   {
    "duration": 15,
    "start_time": "2025-01-23T19:04:04.614Z"
   },
   {
    "duration": 70,
    "start_time": "2025-01-23T19:04:04.630Z"
   },
   {
    "duration": 139,
    "start_time": "2025-01-23T19:04:04.702Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-23T19:04:04.843Z"
   },
   {
    "duration": 29,
    "start_time": "2025-01-23T19:04:04.864Z"
   },
   {
    "duration": 62,
    "start_time": "2025-01-23T19:04:04.895Z"
   },
   {
    "duration": 91,
    "start_time": "2025-01-23T19:04:04.958Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-23T19:04:05.050Z"
   },
   {
    "duration": 52,
    "start_time": "2025-01-23T19:04:05.104Z"
   },
   {
    "duration": 49,
    "start_time": "2025-01-23T19:04:05.159Z"
   },
   {
    "duration": 42,
    "start_time": "2025-01-23T19:04:05.210Z"
   },
   {
    "duration": 48,
    "start_time": "2025-01-23T19:04:05.253Z"
   },
   {
    "duration": 53,
    "start_time": "2025-01-23T19:04:05.306Z"
   },
   {
    "duration": 65,
    "start_time": "2025-01-23T19:04:05.360Z"
   },
   {
    "duration": 20,
    "start_time": "2025-01-23T19:04:05.427Z"
   },
   {
    "duration": 171,
    "start_time": "2025-01-23T19:04:05.448Z"
   },
   {
    "duration": 16,
    "start_time": "2025-01-23T19:04:05.621Z"
   },
   {
    "duration": 9,
    "start_time": "2025-01-23T19:04:05.639Z"
   },
   {
    "duration": 356,
    "start_time": "2025-01-23T19:04:05.650Z"
   },
   {
    "duration": 268,
    "start_time": "2025-01-23T19:04:06.008Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-23T19:04:06.277Z"
   },
   {
    "duration": 242,
    "start_time": "2025-01-23T19:04:06.297Z"
   },
   {
    "duration": 466,
    "start_time": "2025-01-23T19:04:06.541Z"
   },
   {
    "duration": 11,
    "start_time": "2025-01-23T19:04:07.009Z"
   },
   {
    "duration": 223,
    "start_time": "2025-01-23T19:04:07.021Z"
   },
   {
    "duration": 185,
    "start_time": "2025-01-23T19:04:07.246Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T19:04:07.432Z"
   },
   {
    "duration": 274,
    "start_time": "2025-01-23T19:04:07.444Z"
   },
   {
    "duration": 204,
    "start_time": "2025-01-23T19:04:07.720Z"
   },
   {
    "duration": 10,
    "start_time": "2025-01-23T19:04:07.926Z"
   },
   {
    "duration": 18,
    "start_time": "2025-01-23T19:04:07.937Z"
   },
   {
    "duration": 5,
    "start_time": "2025-01-23T19:04:07.957Z"
   },
   {
    "duration": 29,
    "start_time": "2025-01-23T19:04:07.987Z"
   },
   {
    "duration": 7,
    "start_time": "2025-01-23T19:04:08.018Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "284.797px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
